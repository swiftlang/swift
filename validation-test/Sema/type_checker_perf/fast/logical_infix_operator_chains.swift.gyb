// RUN: %scale-test --begin 1 --end 20 --step 1 --select NumLeafScopes %s
// REQUIRES: asserts,no_asan

struct Predicate<T> : Equatable {}

func ||<T>(_: Predicate<T>, _: Predicate<T>) -> Predicate<T> {
  .init()
}

func !=<Value, Operand>(_: Operand, _: Operand) -> Predicate<Value> where Operand : Equatable {
  .init()
}

func !=<Value, Operand>(_: Operand, _: KeyPath<Value, Operand>) -> Predicate<Value> where Operand : Equatable {
  .init()
}

func !=<Value, Operand>(_: KeyPath<Value, Operand>, _: Operand) -> Predicate<Value> where Operand : Equatable {
  .init()
}

func !=<Value, Operand>(_: KeyPath<Value, Operand>, _: KeyPath<Value, Operand>) -> Predicate<Value> where Operand : Equatable {
  .init()
}

enum Format : UInt, Equatable {
case simple = 0
}

struct Parameter {
  struct Buffers {
    struct Data {
      let format: Format
    }

    let data: Data?
  }

  var buffers: Buffers
}

func test(arr: [Parameter]) {
  for p in arr {
    if (p.buffers.data != nil && p.buffers.data!.format != .simple) ||
%for i in range(1, N):
       (p.buffers.data != nil && p.buffers.data!.format != .simple) ||
%end
       (p.buffers.data != nil && p.buffers.data!.format != .simple) {
    }
  }
}
