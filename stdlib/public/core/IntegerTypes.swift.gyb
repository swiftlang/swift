//===--- IntegerTypes.swift.gyb -------------------------------*- swift -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2024 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
%{
#
# Utility code for later in this template
#

from SwiftIntTypes import all_integer_types, int_max_bits, should_define_truncating_bit_pattern_init
from SwiftFloatingPointTypes import getFtoIBounds

from itertools import chain

# Number of bits in the Builtin.Word type
word_bits = int(CMAKE_SIZEOF_VOID_P) * 8

class struct(object):
  def __init__(self, **kw):
    self.__dict__ = kw
  def __repr__(self):
    return 'struct(%r)' % self.__dict__

binaryArithmetic = {
  'Numeric': [
    struct(operator='+', name='adding',      firstArg='_',  llvmName='add', kind='+'),
    struct(operator='-', name='subtracting', firstArg='_',  llvmName='sub', kind='-'),
    struct(operator='*', name='multiplied',  firstArg='by', llvmName='mul', kind='*'),
  ],
  'BinaryInteger': [
    struct(operator='/', name='divided',     firstArg='by', llvmName='div', kind='/'),
    struct(operator='%', name='remainder',   firstArg='dividingBy', llvmName='rem', kind='/'),
  ],
}

binaryBitwise = [
    struct(operator='&', llvmName='and'),
    struct(operator='|', llvmName='or'),
    struct(operator='^', llvmName='xor'),
]

maskingShifts = [
    struct(
      operator='&>>', nonMaskingOperator='>>', description='right shift',
      helper='_nonMaskingRightShift',
      llvmName=lambda s:['lshr','ashr'][s]),
    struct(
      operator='&<<', nonMaskingOperator='<<', description='left shift',
      helper='_nonMaskingLeftShift',
      llvmName=lambda _: 'shl'),
]

}%

//===----------------------------------------------------------------------===//
//===--- Concrete FixedWidthIntegers --------------------------------------===//
//===----------------------------------------------------------------------===//

% for self_type in all_integer_types(word_bits):
%   bits = self_type.bits
%   signed = self_type.is_signed
%   BuiltinName = self_type.builtin_name
%   Self = self_type.stdlib_name
%   OtherSelf = self_type.get_opposite_signedness().stdlib_name
%   Unsigned = 'Signed' if signed else 'Unsigned'
%   u = 's' if signed else 'u'
%   U = 'U' if signed else ''
%   z = 's' if signed else 'z'

%   Article = 'An' if bits == 8 else 'A'
%   if self_type.is_word:
/// ${'A ' if signed else 'An un'}signed integer value type.
///
/// On 32-bit platforms, `${Self}` is the same size as `${Self}32`, and
/// on 64-bit platforms, `${Self}` is the same size as `${Self}64`.
%   else:
/// ${Article} ${bits}-bit ${'' if signed else 'un'}signed integer value
/// type.
%   end
@frozen
public struct ${Self}
  : FixedWidthInteger, ${Unsigned}Integer,
    _ExpressibleByBuiltinIntegerLiteral {

  /// A type that represents an integer literal.
  public typealias IntegerLiteralType = ${Self}

  public var _value: Builtin.Int${bits}

  @_transparent
  public init(_builtinIntegerLiteral x: Builtin.IntLiteral) {
    _value = Builtin.s_to_${u}_checked_trunc_IntLiteral_${BuiltinName}(x).0
  }

  /// Creates a new instance with the same memory representation as the given
  /// value.
  ///
  /// This initializer does not perform any range or overflow checking. The
  /// resulting instance may not have the same numeric value as
  /// `bitPattern`---it is only guaranteed to use the same pattern of bits in
  /// its binary representation.
  ///
  /// - Parameter x: A value to use as the source of the new instance's binary
  ///   representation.
  @_transparent
  public init(bitPattern x: ${OtherSelf}) {
    _value = x._value
  }

%   if Self in ['Int32', 'Int64']:
%     Floating = {32: 'Float', 64: 'Double'}[bits]
  @available(*, unavailable,
    message: "Please use ${Self}(bitPattern: ${OtherSelf}) in combination with ${Floating}.bitPattern property.")
  public init(bitPattern x: ${Floating}) {
    Builtin.unreachable()
  }
%   end

%   for (FloatType, FloatBits) in [
%     ('Float16', 16), ('Float', 32), ('Double', 64), ('Float80', 80)]:
%     (lower, upper) = getFtoIBounds(floatBits=FloatBits, intBits=int(bits), signed=signed)

%     if FloatType == 'Float80':
#if !(os(Windows) || os(Android) || ($Embedded && !os(Linux) && !(os(macOS) || os(iOS) || os(watchOS) || os(tvOS)))) && (arch(i386) || arch(x86_64))
%     elif FloatType == 'Float16':
#if !((os(macOS) || targetEnvironment(macCatalyst)) && arch(x86_64))
%     end

  /// Creates an integer from the given floating-point value, rounding toward
  /// zero.
  ///
  /// Any fractional part of the value passed as `source` is removed, rounding
  /// the value toward zero.
  ///
  ///     let x = Int(21.5)
  ///     // x == 21
  ///     let y = Int(-21.5)
  ///     // y == -21
  ///
  /// If `source` is outside the bounds of this type after rounding toward
  /// zero, a runtime error may occur.
  ///
  ///     let z = UInt(-21.5)
  ///     // Error: ...the result would be less than UInt.min
  ///
  /// - Parameter source: A floating-point value to convert to an integer.
  ///   `source` must be representable in this type after rounding toward
  ///   zero.
%     if FloatType == 'Float16':
  @available(SwiftStdlib 5.3, *)
%     end
  @_transparent
  public init(_ source: ${FloatType}) {
    _precondition(source.isFinite,
      "${FloatType} value cannot be converted to ${Self} because it is either infinite or NaN")
%     if FloatBits == 16 and signed and bits >= 32:
    // A Float16 value, if finite, is always in-range for 32- and 64-bit signed
    // integer types.
%     else:
    _precondition(source > ${str(lower)}.0,
      "${FloatType} value cannot be converted to ${Self} because the result would be less than ${Self}.min")
%       if FloatBits == 16 and not signed and bits >= 16:
    // A Float16 value, if greater than -1 and finite, is always in-range for
    // 16-, 32-, and 64-bit unsigned integer types.
%       else:
    _precondition(source < ${str(upper)}.0,
      "${FloatType} value cannot be converted to ${Self} because the result would be greater than ${Self}.max")
%       end
%     end
    self._value = Builtin.fpto${u}i_FPIEEE${FloatBits}_${BuiltinName}(source._value)
  }

  /// Creates an integer from the given floating-point value, if it can be
  /// represented exactly.
  ///
  /// If the value passed as `source` is not representable exactly, the result
  /// is `nil`. In the following example, the constant `x` is successfully
  /// created from a value of `21.0`, while the attempt to initialize the
  /// constant `y` from `21.5` fails:
  ///
  ///     let x = Int(exactly: 21.0)
  ///     // x == Optional(21)
  ///     let y = Int(exactly: 21.5)
  ///     // y == nil
  ///
  /// - Parameter source: A floating-point value to convert to an integer.
%     if FloatType == 'Float16':
  @available(SwiftStdlib 5.3, *)
%     end
  @_transparent
  public init?(exactly source: ${FloatType}) {
    // The value passed as `source` must not be infinite, NaN, or exceed the
    // bounds of the integer type; the result of `fptosi` or `fptoui` is
    // undefined if it overflows.
%     if FloatBits == 16 and signed and bits >= 32:
    // A Float16 value, if finite, is always in-range for 32- and 64-bit signed
    // integer types.
    guard source.isFinite else {
%     elif FloatBits == 16 and not signed and bits >= 16:
    // A Float16 value, if greater than -1 and finite, is always in-range for
    // 16-, 32-, and 64-bit unsigned integer types.
    guard source > ${str(lower)}.0 && source.isFinite else {
%     else:
    guard source > ${str(lower)}.0 && source < ${str(upper)}.0 else {
%     end
      return nil
    }
    guard source == source.rounded(.towardZero) else {
      return nil
    }
    self._value = Builtin.fpto${u}i_FPIEEE${FloatBits}_${BuiltinName}(source._value)
  }

%     if FloatType in ['Float16', 'Float80']:
#endif
%     end

%   end

  @_transparent
  public static func == (lhs: ${Self}, rhs: ${Self}) -> Bool {
    return Bool(Builtin.cmp_eq_Int${bits}(lhs._value, rhs._value))
  }

  @_transparent
  public static func < (lhs: ${Self}, rhs: ${Self}) -> Bool {
    return Bool(Builtin.cmp_${u}lt_Int${bits}(lhs._value, rhs._value))
  }

// See corresponding definitions in the FixedWidthInteger extension.
%       for x in binaryArithmetic['Numeric'] + binaryArithmetic["BinaryInteger"][:1]:
  @_transparent
  public static func ${x.operator}=(lhs: inout ${Self}, rhs: ${Self}) {
%   if x.kind == '/':
    // No LLVM primitives for checking overflow of division operations, so we
    // check manually.
    if _slowPath(rhs == (0 as ${Self})) {
      _preconditionFailure(
        "Division by zero${' in remainder operation' if x.operator == '%' else ''}")
    }
%     if signed:
    if _slowPath(
      ${'lhs == %s.min && rhs == (-1 as %s)' % (Self, Self)}
    ) {
      _preconditionFailure(
        "Division results in an overflow${' in remainder operation' if x.operator == '%' else ''}")
    }
%     end
    let (result, overflow) =
      (Builtin.${u}${x.llvmName}_Int${bits}(lhs._value, rhs._value),
      false._value)
%   else:
    let (result, overflow) =
      Builtin.${u}${x.llvmName}_with_overflow_Int${bits}(
        lhs._value, rhs._value, true._value)
%   end
    Builtin.condfail_message(overflow,
      StaticString("arithmetic overflow").unsafeRawPointer)
    lhs = ${Self}(result)
  }
%       end

%       for x in chain(*binaryArithmetic.values()):

  @_transparent
  public func ${x.name}ReportingOverflow(
    ${x.firstArg} other: ${Self}
  ) -> (partialValue: ${Self}, overflow: Bool) {
%         if x.kind == '/':
    // No LLVM primitives for checking overflow of division operations, so we
    // check manually.
    if _slowPath(other == (0 as ${Self})) {
      return (partialValue: self, overflow: true)
    }
%           if signed:
    if _slowPath(self == ${Self}.min && other == (-1 as ${Self})) {
%             partialValue = 'self' if x.operator == '/' else '0'
      return (partialValue: ${partialValue}, overflow: true)
    }
%           end

    let (newStorage, overflow) = (
      Builtin.${u}${x.llvmName}_Int${bits}(self._value, other._value),
      false._value)

%         else:

    let (newStorage, overflow) =
      Builtin.${u}${x.llvmName}_with_overflow_Int${bits}(
        self._value, other._value, false._value)
%         end

    return (
      partialValue: ${Self}(newStorage),
      overflow: Bool(overflow))
  }
%       end

  @_transparent
  public static func %=(lhs: inout ${Self}, rhs: ${Self}) {
    // No LLVM primitives for checking overflow of division operations, so we
    // check manually.
    if _slowPath(rhs == (0 as ${Self})) {
      _preconditionFailure(
        "Division by zero in remainder operation")
    }
%     if signed:
    if _slowPath(${'lhs == %s.min && rhs == (-1 as %s)' % (Self, Self)}) {
      _preconditionFailure(
        "Division results in an overflow in remainder operation")
    }
%     end

    let (newStorage, _) = (
      Builtin.${u}rem_Int${bits}(lhs._value, rhs._value),
      false._value)
    lhs = ${Self}(newStorage)
  }

  @_transparent
  public init(_ _value: Builtin.Int${bits}) {
    self._value = _value
  }

% for x in binaryBitwise:
  @_transparent
  public static func ${x.operator}=(lhs: inout ${Self}, rhs: ${Self}) {
    lhs = ${Self}(Builtin.${x.llvmName}_Int${bits}(lhs._value, rhs._value))
  }
% end

% for x in maskingShifts:

  @_transparent
  public static func ${x.operator}=(lhs: inout ${Self}, rhs: ${Self}) {
    let rhs_ = rhs & ${bits - 1}
    lhs = ${Self}(
      Builtin.${x.llvmName(signed)}_Int${bits}(lhs._value, rhs_._value))
  }

% end

  /// The number of bits used for the underlying binary representation of
  /// values of this type.
  ///
%   if self_type.is_word:
  /// The bit width of ${Article.lower()} `${Self}` instance is 32 on 32-bit
  /// platforms and 64 on 64-bit platforms.
%   else:
  /// The bit width of ${Article.lower()} `${Self}` instance is ${bits}.
%   end
  @_transparent
  public static var bitWidth: Int { return ${bits} }

  @_transparent
  public var leadingZeroBitCount: Int {
    return Int(
      ${Self}(
        Builtin.int_ctlz_Int${bits}(self._value, false._value)
      )._lowWord._value)
  }

  @_transparent
  public var trailingZeroBitCount: Int {
    return Int(
      ${Self}(
        Builtin.int_cttz_Int${bits}(self._value, false._value)
      )._lowWord._value)
  }

  @_transparent
  public var nonzeroBitCount: Int {
    return Int(
      ${Self}(
        Builtin.int_ctpop_Int${bits}(self._value)
      )._lowWord._value)
  }

  /// A type that represents the words of this integer.
  @frozen
  public struct Words: RandomAccessCollection, Sendable {
    public typealias Indices = Range<Int>
    public typealias SubSequence = Slice<${Self}.Words>

    @usableFromInline
    internal var _value: ${Self}

    @inlinable
    public init(_ value: ${Self}) {
      self._value = value
    }

    @inlinable
    public var count: Int {
      return (${bits} + ${word_bits} - 1) / ${word_bits}
    }

    @inlinable
    public var startIndex: Int { return 0 }

    @inlinable
    public var endIndex: Int { return count }

    @inlinable
    public var indices: Indices { return startIndex ..< endIndex }

    @_transparent
    public func index(after i: Int) -> Int { return i + 1 }

    @_transparent
    public func index(before i: Int) -> Int { return i - 1 }

    @inlinable
    public subscript(position: Int) -> UInt {
      get {
        _precondition(position >= 0, "Negative word index")
        _precondition(position < endIndex, "Word index out of range")
        let shift = UInt(position._value) &* ${word_bits}
        _internalInvariant(shift < UInt(_value.bitWidth._value))
        return (_value &>> ${Self}(_truncatingBits: shift))._lowWord
      }
    }
  }

  /// A collection containing the words of this value's binary
  /// representation, in order from the least significant to most significant.
% if signed:
  ///
  /// Negative values are returned in two's complement representation,
  /// regardless of the type's underlying implementation.
% end
  @_transparent
  public var words: Words {
    return Words(self)
  }

  @_transparent
  public // transparent
  var _lowWord: UInt {
    % truncOrExt = z + 'ext' if bits <= word_bits else 'trunc'
    return UInt(
      Builtin.${truncOrExt}OrBitCast_Int${bits}_Int${word_bits}(_value)
    )
  }

  @_transparent
  public // transparent
  init(_truncatingBits bits: UInt) {
    % truncOrExt = 'zext' if bits > word_bits else 'trunc'
    self.init(
      Builtin.${truncOrExt}OrBitCast_Int${word_bits}_Int${bits}(bits._value))
  }

  /// A type that can represent the absolute value of any possible value of
  /// this type.
  public typealias Magnitude = ${U}${Self}

% if signed:
  @_transparent
  public var magnitude: U${Self} {
    let base = U${Self}(_value)
    return self < (0 as ${Self}) ? ~base &+ 1 : base
  }
% end

%   dbits = bits*2
%   if bits == 64:
  #if _pointerBitWidth(_64) || arch(arm64_32)
  //  On 32b architectures we fall back on the generic implementation,
  //  because LLVM doesn't know how to codegen the 128b multiply we use.
  //
  //  Note that arm64_32 is a 64b architecture for the purposes of this
  //  check, because we have a 64x64 -> 128 multiply there (the actual
  //  ISA is AArch64).
%   end
  @inlinable
  public func multipliedFullWidth(by other: ${Self})
    -> (high: ${Self}, low: ${Self}.Magnitude) {
    // FIXME(integers): tests
    let lhs_ = Builtin.${z}ext_Int${bits}_Int${dbits}(self._value)
    let rhs_ = Builtin.${z}ext_Int${bits}_Int${dbits}(other._value)

    let res = Builtin.mul_Int${dbits}(lhs_, rhs_)
    let low = ${Self}.Magnitude(Builtin.truncOrBitCast_Int${dbits}_Int${bits}(res))
    let shift = Builtin.zextOrBitCast_Int8_Int${dbits}(UInt8(${bits})._value)
    let shifted = Builtin.ashr_Int${dbits}(res, shift)
    let high = ${Self}(Builtin.truncOrBitCast_Int${dbits}_Int${bits}(shifted))
    return (high: high, low: low)
  }
%   if bits == 64:
  #endif
%   end

%   if bits == 64:
  #if _pointerBitWidth(_64) || arch(arm64_32)
  //  On 32b architectures we fall back on the generic implementation,
  //  because LLVM doesn't know how to codegen the 128b divide we use.
%   end
  /// Returns a tuple containing the quotient and remainder of dividing the
  /// given value by this value.
  ///
  /// The resulting quotient must be representable within the bounds of the
  /// type. If the quotient of dividing `dividend` by this value is too large
  /// to represent in the type, a runtime error will occur.
  ///
  /// - Parameter dividend: A tuple containing the high and low parts of a
  ///   double-width integer. The `high` component of the value carries the
  ///   sign, if the type is signed.
  /// - Returns: A tuple containing the quotient and remainder of `dividend`
  ///   divided by this value.
  @inlinable
  public func dividingFullWidth(
    _ dividend: (high: ${Self}, low: ${Self}.Magnitude)
  ) -> (quotient: ${Self}, remainder: ${Self}) {
    _precondition(self != 0, "Division by zero")
%    if not signed:
    _precondition(self > dividend.high, "Quotient is not representable")
%    end
%    if dbits <= 64:
%     DoubleType = ('Int' if signed else 'UInt') + str(dbits)
    let a = ${DoubleType}(dividend.high) &<< ${bits} |
            ${DoubleType}(dividend.low)
    let b = ${DoubleType}(self)
    let (q, r) = a.quotientAndRemainder(dividingBy: b)
%     if signed:
    // remainder is guaranteed representable, but the quotient might not be
    // so we need to use a conversion that will check for us:
    guard let quotient = ${Self}(exactly: q) else {
      _preconditionFailure("Quotient is not representable")
    }
    return (quotient, ${Self}(truncatingIfNeeded: r))
%     else:
    // quotient and remainder are both guaranteed to be representable by
    // the precondition we enforced above and the definition of division.
    return (${Self}(truncatingIfNeeded: q), ${Self}(truncatingIfNeeded: r))
%     end
%    else:
    let lhsHigh = Builtin.${z}ext_Int${bits}_Int${dbits}(dividend.high._value)
    let shift = Builtin.zextOrBitCast_Int8_Int${dbits}(UInt8(${bits})._value)
    let lhsHighShifted = Builtin.shl_Int${dbits}(lhsHigh, shift)
    let lhsLow = Builtin.zext_Int${bits}_Int${dbits}(dividend.low._value)
    let a = Builtin.or_Int${dbits}(lhsHighShifted, lhsLow)
    let b = Builtin.${z}ext_Int${bits}_Int${dbits}(self._value)
    
    let q = Builtin.${u}div_Int${dbits}(a, b)
    let r = Builtin.${u}rem_Int${dbits}(a, b)

%     if signed:
    // remainder is guaranteed representable, but the quotient might not be
    // so we need to check that the conversion succeeds:
    let (quotient, overflow) =
      Builtin.s_to_s_checked_trunc_Int${dbits}_Int${bits}(q)
    _precondition(!Bool(overflow), "Quotient is not representable")
%     else:
    // quotient and remainder are both guaranteed to be representable by
    // the precondition we enforced above and the definition of division.
    let quotient = Builtin.truncOrBitCast_Int${dbits}_Int${bits}(q)
%     end
    let remainder = Builtin.truncOrBitCast_Int${dbits}_Int${bits}(r)

    return (quotient: Self(quotient), remainder: Self(remainder))
%    end
  }
%   if bits == 64:
  #endif
%   end

  @_transparent
  public var byteSwapped: ${Self} {
%   if bits <= 8:
    return self
%   else:
    return ${Self}(Builtin.int_bswap_${BuiltinName}(_value))
%   end
  }

  // Implementation details

% if self_type.is_word:
  @_transparent
  public // @testable
  init(_ _v: Builtin.Word) {
% if BuiltinName == 'Int16':
    self._value = Builtin.truncOrBitCast_Word_Int16(_v)
% elif BuiltinName == 'Int32':
    self._value = Builtin.truncOrBitCast_Word_Int32(_v)
% elif BuiltinName == 'Int64':
    self._value = Builtin.${z}extOrBitCast_Word_Int64(_v)
% end
  }

  @_transparent
  public // @testable
  var _builtinWordValue: Builtin.Word {
% if BuiltinName == 'Int16':
    return Builtin.${z}extOrBitCast_Int16_Word(_value)
% elif BuiltinName == 'Int32':
    return Builtin.${z}extOrBitCast_Int32_Word(_value)
% elif BuiltinName == 'Int64':
    return Builtin.truncOrBitCast_Int64_Word(_value)
% end
  }
% end

  @inlinable
  @inline(__always)
  public func signum() -> ${Self} {
    let isPositive = ${Self}(Builtin.zext_Int1_Int${bits}(
      (self > (0 as ${Self}))._value))
    return isPositive | (self &>> ${bits - 1})
  }
}
%# end of concrete type: ${Self}

extension ${Self}: Hashable {
  /// Hashes the essential components of this value by feeding them into the
  /// given hasher.
  ///
  /// - Parameter hasher: The hasher to use when combining the components
  ///   of this instance.
  @inlinable
  public func hash(into hasher: inout Hasher) {
    hasher._combine(${U}${Self}(_value))
  }

  @inlinable
  public func _rawHashValue(seed: Int) -> Int {
    % if bits == 64:
    return Hasher._hash(seed: seed, UInt64(_value))
    % elif bits == word_bits:
    return Hasher._hash(seed: seed, UInt(_value))
    % else:
    return Hasher._hash(
      seed: seed,
      bytes: UInt64(truncatingIfNeeded: ${U}${Self}(_value)),
      count: ${bits // 8})
    % end
  }
}

@_unavailableInEmbedded
extension ${Self}: _HasCustomAnyHashableRepresentation {
  // Not @inlinable
  public func _toCustomAnyHashable() -> AnyHashable? {
    return AnyHashable(_box: _IntegerAnyHashableBox(self))
  }
}

// FIXME(integers): this section here is to help the typechecker,
// as it seems to have problems with a pattern where the nonmutating operation
// is defined on a protocol in terms of a mutating one that is itself defined
// on concrete types.
extension ${Self} {

%   for x in binaryBitwise + maskingShifts + list(chain(*binaryArithmetic.values())):

  @_transparent
  public static func ${x.operator}(lhs: ${Self}, rhs: ${Self}) -> ${Self} {
    var lhs = lhs
    lhs ${x.operator}= rhs
    return lhs
  }

%   end

  // IMPORTANT: The following four apparently unnecessary overloads of
  // comparison operations are necessary for literal comparands to be
  // inferred as the desired type.
  //
  // Absent these, an expression like `Int8.min != 1 << 7` would have
  // two candidates for `!=`: the heterogeneous generic operator defined
  // on BinaryInteger, and the homogeneous generic operator defined on
  // Equatable. The heterogeneous one is chosen because it is "more
  // specialized," which results in `1 << 7` being given the type `Int`
  // and the value 128, which compares not-equal to `Int8.min`.
  //
  // However, there is necessarily a homogeneous concrete `==` operator
  // because it is a customization point for Equatable, so the expression
  // `Int8.min == 1 << 7` types `1 << 7` as `Int8` with value -128, which
  // compares equal to `Int8.min`.
  //
  // This inconsistency can be resolved by ensuring that we have
  // concrete overloads of every comparison operation. It's still possible
  // to get literal expression comparands typed Int in generic contexts,
  // but there's also a pretty straightforward workaround (adding an
  // explicit type).
  @_transparent @_alwaysEmitIntoClient
  public static func !=(lhs: ${Self}, rhs: ${Self}) -> Bool {
    return !(lhs == rhs)
  }

  @_transparent
  public static func <= (lhs: ${Self}, rhs: ${Self}) -> Bool {
    return !(rhs < lhs)
  }

  @_transparent
  public static func >= (lhs: ${Self}, rhs: ${Self}) -> Bool {
    return !(lhs < rhs)
  }

  @_transparent
  public static func > (lhs: ${Self}, rhs: ${Self}) -> Bool {
    return rhs < lhs
  }
}


extension ${Self}: Sendable { }

% if signed:
// TODO: Consider removing the underscore.
/// Returns the argument and specifies that the value is not negative.
/// It has only an effect if the argument is a load or call.
@_transparent
public func _assumeNonNegative(_ x: ${Self}) -> ${Self} {
  _internalInvariant(x >= (0 as ${Self}))
  return ${Self}(Builtin.assumeNonNegative_${BuiltinName}(x._value))
}
% end

//===--- end of FIXME(integers) -------------------------------------------===//

% end # end of concrete FixedWidthInteger section

extension Int {
  /// Returns the distance from this value to the given value, expressed as a
  /// stride.
  ///
  /// For two values `x` and `y`, and a distance `n = x.distance(to: y)`,
  /// `x.advanced(by: n) == y`.
  ///
  /// - Parameter other: The value to calculate the distance to.
  /// - Returns: The distance from this value to `other`.
  @_transparent
  public func distance(to other: Int) -> Int {
    return other - self
  }

  /// Returns a value that is offset the specified distance from this value.
  ///
  /// Use the `advanced(by:)` method in generic code to offset a value by a
  /// specified distance. If you're working directly with numeric values, use
  /// the addition operator (`+`) instead of this method.
  ///
  /// For a value `x`, a distance `n`, and a value `y = x.advanced(by: n)`,
  /// `x.distance(to: y) == n`.
  ///
  /// - Parameter n: The distance to advance this value.
  /// - Returns: A value that is offset from this value by `n`.
  @_transparent
  public func advanced(by n: Int) -> Int {
    return self + n
  }
}

@_unavailableInEmbedded
internal struct _IntegerAnyHashableBox<
  Base: FixedWidthInteger
>: _AnyHashableBox {
  internal let _value: Base

  internal init(_ value: Base) {
    self._value = value
  }

  internal var _canonicalBox: _AnyHashableBox {
    // We need to follow NSNumber semantics here; the AnyHashable forms of
    // integer types holding the same mathematical value should compare equal.
    // Sign-extend value to a 64-bit integer. This will generate hash conflicts
    // between, say -1 and UInt.max, but that's fine.
    if _value < 0 {
      return _IntegerAnyHashableBox<Int64>(Int64(truncatingIfNeeded: _value))
    }
    return _IntegerAnyHashableBox<UInt64>(UInt64(truncatingIfNeeded: _value))
  }

  internal func _isEqual(to box: _AnyHashableBox) -> Bool? {
    if Base.self == UInt64.self {
      guard let box = box as? _IntegerAnyHashableBox<UInt64> else { return nil }
      return _value == box._value
    }
    if Base.self == Int64.self {
      guard let box = box as? _IntegerAnyHashableBox<Int64> else { return nil }
      return _value == box._value
    }
    _preconditionFailure("self isn't canonical")
  }

  internal var _hashValue: Int {
    _internalInvariant(Base.self == UInt64.self || Base.self == Int64.self,
      "self isn't canonical")
    return _value.hashValue
  }

  internal func _hash(into hasher: inout Hasher) {
    _internalInvariant(Base.self == UInt64.self || Base.self == Int64.self,
      "self isn't canonical")
    _value.hash(into: &hasher)
  }

  internal func _rawHashValue(_seed: Int) -> Int {
    _internalInvariant(Base.self == UInt64.self || Base.self == Int64.self,
      "self isn't canonical")
    return _value._rawHashValue(seed: _seed)
  }

  internal var _base: Any {
    return _value
  }

  internal func _unbox<T: Hashable>() -> T? {
    return _value as? T
  }

  internal func _downCastConditional<T>(
    into result: UnsafeMutablePointer<T>
  ) -> Bool {
    guard let value = _value as? T else { return false }
    result.initialize(to: value)
    return true
  }
}

// ${'Local Variables'}:
// eval: (read-only-mode 1)
// End:
