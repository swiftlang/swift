set(library_name "swiftCompatibilityPacks")

include_directories("include/" "${SWIFT_STDLIB_SOURCE_DIR}")

add_compile_definitions(SWIFT_COMPATIBILITY_PACKS)
add_swift_target_library("${library_name}" STATIC
  Metadata.cpp

  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}

  C_COMPILE_FLAGS
    ${CXX_COMPILE_FLAGS}
    "-D__STDC_WANT_LIB_EXT1__=1"
  LINK_FLAGS ${CXX_LINK_FLAGS}
  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}
  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}
  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}
  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}
  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}

  MACCATALYST_BUILD_FLAVOR "zippered"

  INSTALL_IN_COMPONENT compiler
  INSTALL_WITH_SHARED)


# FIXME: We need a more flexible mechanism to add lipo targets generated by
# add_swift_target_library to the ALL target. Until then this hack is necessary
# to ensure these libraries build.
foreach(sdk ${SWIFT_SDKS})
  set(target_name "${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}")
  if(NOT TARGET "${target_name}")
    continue()
  endif()

  set_target_properties("${target_name}"
    PROPERTIES
      EXCLUDE_FROM_ALL FALSE)
endforeach()
