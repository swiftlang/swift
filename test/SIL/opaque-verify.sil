// RUN: %target-sil-opt -enable-sil-opaque-values %s

// REQUIRES: asserts

protocol P {
  func foo()
}

// Ensure that open_existential_addr can be used by an unqualified load.
sil [ossa] @loadFromExis : $@convention(thin) (@in P) -> () {
bb(%0 : @owned $P):
  %tempP = alloc_stack $P, var
  store %0 to [init] %tempP : $*P
  %opened = open_existential_addr mutable_access %tempP : $*P to $*@opened("295A5344-9728-11E7-B89E-38C9860EC692", P) Self
  %val = load [take] %opened : $*@opened("295A5344-9728-11E7-B89E-38C9860EC692", P) Self
  %wm = witness_method $@opened("295A5344-9728-11E7-B89E-38C9860EC692", P) Self, #P.foo : <Self where Self : P> (Self) -> () -> (), %opened : $*@opened("295A5344-9728-11E7-B89E-38C9860EC692", P) Self : $@convention(witness_method: P) <τ_0_0 where τ_0_0 : P> (@in_guaranteed τ_0_0) -> ()
  %call = apply %wm<@opened("295A5344-9728-11E7-B89E-38C9860EC692", P) Self>(%val) : $@convention(witness_method: P) <τ_0_0 where τ_0_0 : P> (@in_guaranteed τ_0_0) -> ()
  destroy_value %val : $@opened("295A5344-9728-11E7-B89E-38C9860EC692", P) Self
  dealloc_stack %tempP : $*P
  %void = tuple ()
  return %void : $()
}
