// RUN: %target-sil-opt -test-runner \
// RUN:   -enable-experimental-feature LifetimeDependence \
// RUN:   %s -o /dev/null 2>&1 | %FileCheck %s

// REQUIRES: swift_feature_LifetimeDependence

sil_stage raw

import Builtin
import Swift

struct S : ~Copyable {}

class C {}

struct SRef : ~Copyable {
  var c: C
}

struct SDeinit : ~Copyable {
  static var c: C 

  deinit {
    Self.c = C()
  }
}

struct SCopyable {}

// CHECK-LABEL: begin {{.*}} print-type-lowering with: @argument[0]
// CHECK:       isLexical: true
// CHECK:       hasOnlyDefaultDeinit: true
// CHECK-LABEL: end {{.*}} print-type-lowering with: @argument[0]
sil [ossa] @move_only_argument : $@convention(thin) (@owned S) -> () {
bb0(%0 : @owned $S):
  specify_test "print-type-lowering @argument[0]"
  destroy_value %0 : $S
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin {{.*}} print-type-lowering with: @argument[0]
// CHECK:       isOrContainsPack: true
// CHECK:       hasOnlyDefaultDeinit: false
// CHECK-LABEL: end {{.*}} print-type-lowering with: @argument[0]
sil @pack_argument : $@convention(thin) <each T> (@pack_guaranteed Pack{repeat each T}) -> () {
bb0(%0 : $*Pack{repeat each T}):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

public struct VG<each T> {
  var value: (repeat each T)
}

public struct VGS<T> {
  let g: VG<T>
}

public enum VGE<T> {
  case one(VG<T>)
  case two(VG<T, T>, VG<T>)
  case three(VG<T, T, T>)
}

// CHECK-LABEL: begin {{.*}} pack_field: print-type-lowering with: %instance
// CHECK:       isOrContainsPack: true
// CHECK-LABEL: end {{.*}} pack_field: print-type-lowering with: %instance
sil @pack_field : $@convention(thin) <T> (@in_guaranteed VGS<T>) -> () {
entry(%instance : $*VGS<T>):
  specify_test "print-type-lowering %instance"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin {{.*}} pack_element: print-type-lowering with: %instance
// CHECK:       isOrContainsPack: true
// CHECK-LABEL: end {{.*}} pack_element: print-type-lowering with: %instance
sil @pack_element : $@convention(thin) <T> (@in_guaranteed VGE<T>) -> () {
entry(%instance : $*VGE<T>):
  specify_test "print-type-lowering %instance"
  %retval = tuple ()
  return %retval : $()
}

public struct G<T> {
  var value: (T, T)
}

public struct GS<T> {
  let g: G<T>
}

public enum GE<T> {
  case one(G<T>)
  case two(G<T>, G<T>)
  case three(G<T>)
}

// CHECK-LABEL: begin {{.*}} nonpack_field: print-type-lowering with: %instance
// CHECK:       isOrContainsPack: false
// CHECK-LABEL: end {{.*}} nonpack_field: print-type-lowering with: %instance
sil @nonpack_field : $@convention(thin) <T> (@in_guaranteed GS<T>) -> () {
entry(%instance : $*GS<T>):
  specify_test "print-type-lowering %instance"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin {{.*}} nonpack_element: print-type-lowering with: %instance
// CHECK:       isOrContainsPack: false
// CHECK-LABEL: end {{.*}} nonpack_element: print-type-lowering with: %instance
sil @nonpack_element : $@convention(thin) <T> (@in_guaranteed GE<T>) -> () {
entry(%instance : $*GE<T>):
  specify_test "print-type-lowering %instance"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin {{.*}} token: print_ast_type_lowering with: %instance
// CHECK:       isTrivial: true
// CHECK:       hasOnlyDefaultDeinit: true
// CHECK-LABEL: end {{.*}} token: print_ast_type_lowering with: %instance
sil @token : $@convention(thin) (@in Builtin.RawPointer) -> () {
entry(%addr : $*Builtin.RawPointer):
  %ptr = address_to_pointer %addr : $*Builtin.RawPointer to $Builtin.RawPointer
  %instance = builtin "once"(%ptr : $Builtin.RawPointer, undef : $()) : $Builtin.SILToken
  specify_test "print_ast_type_lowering %instance"
  return undef : $()
}

struct GSNC<T: ~Copyable>: ~Copyable {
    var x: T
}

extension GSNC: Copyable where T: Copyable  {}

struct GSNE<T: ~Escapable>: ~Escapable {
    var x: T
}

extension GSNE: Escapable where T: Escapable {}

enum GENC<T: ~Copyable>: ~Copyable {
    case x(T)
    case knoll
}

enum GENE<T: ~Escapable>: ~Escapable {
    case x(T)
    case knoll
}

extension GENC: Copyable where T: Copyable {}

extension GENE: Escapable where T: Escapable {}

// TODO: We should have 'isTrivial: true' for the following four tests: gsnc_argument, gsne_argument, genc_argument,
// gene_argument. This requires fixing Typelowering visitAnyStructType and visitAnyEnumType to apply the current
// abstraction pattern for each stored property that refers to an archetype. Similar how TypeLowering handles the
// aggregate type by calling AbstractionPattern::conformsToKnownProtocol.
//
// CHECK-LABEL: begin running test 1 of 1 on gsnc_argument: print-type-lowering with: @argument[0]
// CHECK: Type Lowering for lowered type: $*GSNC<T>.
// CHECK: isTrivial: false.
// CHECK: hasOnlyDefaultDeinit: false
// CHECK-LABEL: end running test 1 of 1 on gsnc_argument: print-type-lowering with: @argument[0]
sil [ossa] @gsnc_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed GSNC<T>) -> () {
bb0(%0 : $*GSNC<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on gsne_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: false.
// CHECK: hasOnlyDefaultDeinit: false
// CHECK-LABEL: end running test 1 of 1 on gsne_argument: print-type-lowering with: @argument[0]
sil [ossa] @gsne_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed GSNE<T>) -> () {
bb0(%0 : $*GSNE<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on genc_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: false.
// CHECK: hasOnlyDefaultDeinit: false
// CHECK-LABEL: end running test 1 of 1 on genc_argument: print-type-lowering with: @argument[0]
sil [ossa] @genc_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed GENC<T>) -> () {
bb0(%0 : $*GENC<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on gene_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: false.
// CHECK: hasOnlyDefaultDeinit: false
// CHECK-LABEL: end running test 1 of 1 on gene_argument: print-type-lowering with: @argument[0]
sil [ossa] @gene_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed GENE<T>) -> () {
bb0(%0 : $*GENE<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

struct Bitwise<T: BitwiseCopyable>: BitwiseCopyable {
  var x: T
}

// TODO: This should return 'isTrivial: true' and
// 'hasOnlyDefaultDeinit: true' . This is particularly inexcusable
// because the 'Bitwise' cannot be nontrivial over any 'T', *and* the
// declaration itself is declared BitwiseCopyable.
//
// CHECK-LABEL: begin running test 1 of 1 on bitwise_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: false.
// CHECK: hasOnlyDefaultDeinit: false
// CHECK-LABEL: end running test 1 of 1 on bitwise_argument: print-type-lowering with: @argument[0]
sil [ossa] @bitwise_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed Bitwise<T>) -> () {
bb0(%0 : $*Bitwise<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on gsnc_specialized_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: true.
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on gsnc_specialized_argument: print-type-lowering with: @argument[0]
sil [ossa] @gsnc_specialized_argument : $@convention(thin) (@in_guaranteed GSNC<SCopyable>) -> () {
bb0(%0 : $*GSNC<SCopyable>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on gsne_specialized_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: true.
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on gsne_specialized_argument: print-type-lowering with: @argument[0]
sil [ossa] @gsne_specialized_argument : $@convention(thin) (@in_guaranteed GSNE<SCopyable>) -> () {
bb0(%0 : $*GSNE<SCopyable>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on genc_specialized_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: true.
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on genc_specialized_argument: print-type-lowering with: @argument[0]
sil [ossa] @genc_specialized_argument : $@convention(thin) (@in_guaranteed GENC<SCopyable>) -> () {
bb0(%0 : $*GENC<SCopyable>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on gene_specialized_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: true.
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on gene_specialized_argument: print-type-lowering with: @argument[0]
sil [ossa] @gene_specialized_argument : $@convention(thin) (@in_guaranteed GENE<SCopyable>) -> () {
bb0(%0 : $*GENE<SCopyable>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

struct GSNCInt<T: ~Copyable>: ~Copyable {
    var x: Int
}

extension GSNCInt: Copyable where T: Copyable  {}

struct GSNEInt<T: ~Escapable>: ~Escapable {
    var x: Int
    @lifetime(immortal)
    init() { x = 0 }
}

extension GSNEInt: Escapable where T: Escapable {}

enum GENCInt<T: ~Copyable>: ~Copyable {
    case x(Int)
    case knoll
}

enum GENEInt<T: ~Escapable>: ~Escapable {
    case x(Int)
    case knoll
}

extension GENCInt: Copyable where T: Copyable {}

extension GENEInt: Escapable where T: Escapable {}

// CHECK-LABEL: begin running test 1 of 1 on gsncint_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: true.
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on gsncint_argument: print-type-lowering with: @argument[0]
sil [ossa] @gsncint_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed GSNCInt<T>) -> () {
bb0(%0 : $*GSNCInt<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on gsneint_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: true.
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on gsneint_argument: print-type-lowering with: @argument[0]
sil [ossa] @gsneint_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed GSNEInt<T>) -> () {
bb0(%0 : $*GSNEInt<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on gencint_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: true.
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on gencint_argument: print-type-lowering with: @argument[0]
sil [ossa] @gencint_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed GENCInt<T>) -> () {
bb0(%0 : $*GENCInt<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on geneint_argument: print-type-lowering with: @argument[0]
// CHECK: isTrivial: true.
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on geneint_argument: print-type-lowering with: @argument[0]
sil [ossa] @geneint_argument : $@convention(thin) <T: BitwiseCopyable> (@in_guaranteed GENEInt<T>) -> () {
bb0(%0 : $*GENEInt<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// =============================================================================
// CustomDeinit
// Generic struct and generic enum with BitwiseCopyable members are checked above.
// =============================================================================

// CHECK-LABEL: begin running test 1 of 1 on noncopyable_argument: print-type-lowering with: @argument[0]
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on noncopyable_argument: print-type-lowering with: @argument[0]
sil [ossa] @noncopyable_argument : $@convention(thin) (@guaranteed S) -> () {
bb0(%0 : @guaranteed $S):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on ref_argument: print-type-lowering with: @argument[0]
// CHECK: hasOnlyDefaultDeinit: false
// CHECK-LABEL: end running test 1 of 1 on ref_argument: print-type-lowering with: @argument[0]
sil [ossa] @ref_argument : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on sref_argument: print-type-lowering with: @argument[0]
// CHECK: hasOnlyDefaultDeinit: false
// CHECK-LABEL: end running test 1 of 1 on sref_argument: print-type-lowering with: @argument[0]
sil [ossa] @sref_argument : $@convention(thin) (@guaranteed SRef) -> () {
bb0(%0 : @guaranteed $SRef):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on noncopyable_deinit: print-type-lowering with: @argument[0]
// CHECK: hasOnlyDefaultDeinit: false
// CHECK-LABEL: end running test 1 of 1 on noncopyable_deinit: print-type-lowering with: @argument[0]
sil [ossa] @noncopyable_deinit : $@convention(thin) (@guaranteed SDeinit) -> () {
bb0(%0 : @guaranteed $SDeinit):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on rawspan_argument: print-type-lowering with: @argument[0]
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on rawspan_argument: print-type-lowering with: @argument[0]
sil [ossa] @rawspan_argument : $@convention(thin) (@guaranteed RawSpan) -> () {
bb0(%0 : @guaranteed $RawSpan):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on span_argument: print-type-lowering with: @argument[0]
// CHECK: hasOnlyDefaultDeinit: true
// CHECK-LABEL: end running test 1 of 1 on span_argument: print-type-lowering with: @argument[0]
sil [ossa] @span_argument : $@convention(thin) <T>(@guaranteed Span<T>) -> () {
bb0(%0 : @guaranteed $Span<T>):
  specify_test "print-type-lowering @argument[0]"
  %retval = tuple ()
  return %retval : $()
}
