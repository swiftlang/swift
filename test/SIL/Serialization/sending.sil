// First parse this and then emit a *.sib. Then read in the *.sib, then recreate

// RUN: %empty-directory(%t)
// RUN: %target-sil-opt -strict-concurrency=complete %s -emit-sib -o %t/tmp.sib -module-name basic2
// RUN: %target-sil-opt -strict-concurrency=complete %t/tmp.sib -o %t/tmp.2.sib -module-name basic2
// RUN: %target-sil-opt -strict-concurrency=complete %t/tmp.2.sib -module-name basic2 -emit-sorted-sil | %FileCheck %s

sil_stage raw

// CHECK-LABEL: func sendingValueDefault<T>(_ t: sending T)
func sendingValueDefault<T>(_ t: sending T)
// CHECK-LABEL: func sendingValue__shared<T>(_ t: __shared sending T)
func sendingValue__shared<T>(_ t: __shared sending T)
// CHECK-LABEL: func sendingValueConsuming<T>(_ t: consuming sending T)
func sendingValueConsuming<T>(_ t: consuming sending T)

// CHECK-LABEL: sil [ossa] @$test : $@convention(thin) <τ_0_0> (@sil_sending @in_guaranteed τ_0_0) -> () {
sil [ossa] @$test : $@convention(thin) <τ_0_0> (@sil_sending @in_guaranteed τ_0_0) -> () {
bb0(%0 : $*τ_0_0):
  %9999 = tuple ()
  return %9999 : $()
}