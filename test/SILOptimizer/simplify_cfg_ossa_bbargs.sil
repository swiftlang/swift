// RUN: %target-sil-opt -sil-print-types -update-borrowed-from -test-runner %s | %FileCheck %s

import Builtin

class Klass {}

class AnyKlass {}

enum FakeOptional<T> {
  case some(T)
  case none
}

struct NonTrivialStruct {
  var val: Klass
}

sil @use_klass : $@convention(thin) (@guaranteed Klass) -> ()

// CHECK-LABEL: sil [ossa] @test_simplify_args1 :
// CHECK: bb2:
// CHECK-LABEL: } // end sil function 'test_simplify_args1'
sil [ossa] @test_simplify_args1 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  specify_test "simplify_cfg_simplify_block_args"
  %1 = begin_borrow %0 : $Klass
  br bb1(%1 : $Klass)

bb1(%3 : @guaranteed $Klass):
  br bb2(%3 : $Klass)

bb2(%5 : @guaranteed $Klass):
  end_borrow %5 : $Klass
  destroy_value %0 : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_args2 :
// CHECK: bb3({{.*}}):
// CHECK-LABEL: } // end sil function 'test_simplify_args2'
sil [ossa] @test_simplify_args2 : $@convention(thin) (@owned Klass, @owned Klass) -> () {
bb0(%0 : @owned $Klass, %1 : @owned $Klass):
  specify_test "simplify_cfg_simplify_block_args"
  cond_br undef, bb1, bb2

bb1:
  %2 = begin_borrow %0 : $Klass
  br bb3(%2 : $Klass)

bb2:
  %3 = begin_borrow %1 : $Klass
  br bb3(%3 : $Klass)

bb3(%4 : @guaranteed $Klass):
  end_borrow %4 : $Klass
  destroy_value %0 : $Klass
  destroy_value %1 : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_args3 :
// CHECK: bb3({{.*}}):
// CHECK-LABEL: } // end sil function 'test_simplify_args3'
sil [ossa] @test_simplify_args3 : $@convention(thin) (@owned Klass, @owned Klass) -> () {
bb0(%0 : @owned $Klass, %1 : @owned $Klass):
  specify_test "simplify_cfg_simplify_block_args"
  cond_br undef, bb1, bb2

bb1:
  destroy_value %0 : $Klass
  br bb3(%1 : $Klass)

bb2:
  destroy_value %1 : $Klass
  br bb3(%0 : $Klass)

bb3(%4 : @owned $Klass):
  destroy_value %4 : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_args4 :
// CHECK: bb3:
// CHECK-LABEL: } // end sil function 'test_simplify_args4'
sil [ossa] @test_simplify_args4 : $@convention(thin) (@owned Klass, @owned Klass) -> () {
bb0(%0 : @owned $Klass, %1 : @owned $Klass):
  specify_test "simplify_cfg_simplify_block_args"
  cond_br undef, bb1, bb2

bb1:
  destroy_value %0 : $Klass
  br bb3(%1 : $Klass)

bb2:
  destroy_value %0 : $Klass
  br bb3(%1 : $Klass)

bb3(%4 : @owned $Klass):
  destroy_value %4 : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_args5 :
// CHECK: bb3:
// CHECK-LABEL: } // end sil function 'test_simplify_args5'
sil [ossa] @test_simplify_args5 : $@convention(thin) (@owned Klass, @owned Klass) -> () {
bb0(%0 : @owned $Klass, %1 : @owned $Klass):
  specify_test "simplify_cfg_simplify_block_args"
  %2 = begin_borrow %0 : $Klass
  cond_br undef, bb1, bb2

bb1:
  br bb3(%2 : $Klass)

bb2:
  br bb3(%2 : $Klass)

bb3(%4 : @guaranteed $Klass):
  end_borrow %4 : $Klass
  destroy_value %0 : $Klass
  destroy_value %1 : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_args6 :
// CHECK: bb1:
// CHECK-LABEL: } // end sil function 'test_simplify_args6'
sil [ossa] @test_simplify_args6 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  specify_test "simplify_cfg_simplify_block_args"
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb1(%1 : $FakeOptional<Klass>)

bb1(%3 : @owned $FakeOptional<Klass>):
  switch_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb3, case #FakeOptional.none!enumelt: bb2

bb2:
  br bb4

bb3(%6 : @owned $Klass):
  destroy_value %6 : $Klass
  br bb4

bb4:
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_args7 :
// CHECK: bb1:
// CHECK-LABEL: } // end sil function 'test_simplify_args7'
sil [ossa] @test_simplify_args7 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  specify_test "simplify_cfg_simplify_block_args"
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb1(%1 : $FakeOptional<Klass>)

bb1(%3 : @owned $FakeOptional<Klass>):
  switch_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb3, case #FakeOptional.none!enumelt: bb2

bb2:
  br bb4

bb3(%6 : @owned $Klass):
  destroy_value %6 : $Klass
  br bb4

bb4:
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_args8 :
// CHECK-NOT: unchecked_enum_data
// CHECK-LABEL: } // end sil function 'test_simplify_args8'
sil [ossa] @test_simplify_args8 : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass):
  specify_test "simplify_cfg_simplify_argument @block[1] 0"
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb1(%1 : $FakeOptional<Klass>)

bb1(%3 : @guaranteed $FakeOptional<Klass>):
  %4 = unchecked_enum_data %3 : $FakeOptional<Klass>, #FakeOptional.some!enumelt
  %f = function_ref @use_klass : $@convention(thin) (@guaranteed Klass) -> ()
  %c = apply %f(%4) : $@convention(thin) (@guaranteed Klass) -> ()
  br bb3

bb3:
  %7 = tuple ()
  return %7 : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_args9 : 
// CHECK-NOT: unchecked_enum_date
// CHECK-LABEL: } // end sil function 'test_simplify_args9'
sil [ossa] @test_simplify_args9 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  specify_test "simplify_cfg_simplify_argument @block[1] 0"
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb1(%1 : $FakeOptional<Klass>)

bb1(%3 : @owned $FakeOptional<Klass>):
  %4 = unchecked_enum_data %3 : $FakeOptional<Klass>, #FakeOptional.some!enumelt
  %f = function_ref @use_klass : $@convention(thin) (@guaranteed Klass) -> ()
  %c = apply %f(%4) : $@convention(thin) (@guaranteed Klass) -> ()
  destroy_value %4 : $Klass
  br bb3

bb3:
  %7 = tuple ()
  return %7 : $()
}

// CHECK-LABEL: test_dont_remove_mandatory_dead_args :
// CHECK: checked_cast_br AnyKlass in {{%.*}} : $AnyKlass to Klass, bb1
// CHECK: bb1([[VAR:%[0-9]+]] : @guaranteed $Klass)
// CHECK-NOT: [[VAR]]
// CHECK: return
sil [ossa] @test_dont_remove_mandatory_dead_args : $@convention(thin) (@guaranteed AnyKlass) -> () {
bb0(%0 : @guaranteed $AnyKlass):
  specify_test "simplify_cfg_simplify_argument @block[1] 0"
  checked_cast_br AnyKlass in %0 : $AnyKlass to Klass, bb1, bb2

bb1(%1 : @guaranteed $Klass):
  %2 = integer_literal $Builtin.Int32, 1
  br bb3(%2 : $Builtin.Int32)

bb2(%default : @guaranteed $AnyKlass):
  %3 = integer_literal $Builtin.Int32, 0
  br bb3(%3 : $Builtin.Int32)

bb3(%4 : $Builtin.Int32):
  %5 = tuple ()
  return %5 : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_enum_arg_owned : 
// CHECK: bb1([[ARG:%.*]] : @owned $FakeOptional<Klass>)
// CHECK-LABEL: } // end sil function 'test_simplify_enum_arg_owned'
sil [ossa] @test_simplify_enum_arg_owned : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  specify_test "simplify_cfg_simplify_argument @block[1] 0"
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  %c = copy_value %1 : $FakeOptional<Klass>
  br bb1(%1 : $FakeOptional<Klass>)

bb1(%3 : @owned $FakeOptional<Klass>):
  %4 = unchecked_enum_data %3 : $FakeOptional<Klass>, #FakeOptional.some!enumelt
  %f = function_ref @use_klass : $@convention(thin) (@guaranteed Klass) -> ()
  apply %f(%4) : $@convention(thin) (@guaranteed Klass) -> ()
  br bb2

bb2:
  destroy_value %4 : $Klass
  br bb3

bb3:
  destroy_value %c : $FakeOptional<Klass>
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_enum_arg_guaranteed1 : 
// CHECK: bb1([[ARG:%.*]] : @guaranteed $Klass)
// CHECK-LABEL: } // end sil function 'test_simplify_enum_arg_guaranteed1'
sil [ossa] @test_simplify_enum_arg_guaranteed1 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  specify_test "simplify_cfg_simplify_argument @block[1] 0"
  %b = begin_borrow %0 : $Klass
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %b : $Klass
  %c = copy_value %1 : $FakeOptional<Klass>
  br bb1(%1 : $FakeOptional<Klass>)

bb1(%3 : @guaranteed $FakeOptional<Klass>):
  %4 = unchecked_enum_data %3 : $FakeOptional<Klass>, #FakeOptional.some!enumelt
  %f = function_ref @use_klass : $@convention(thin) (@guaranteed Klass) -> ()
  apply %f(%4) : $@convention(thin) (@guaranteed Klass) -> ()
  br bb2

bb2:
  destroy_value %c : $FakeOptional<Klass>
  end_borrow %b : $Klass
  destroy_value %0 : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_enum_arg_guaranteed2 : 
// CHECK: bb1([[ARG:%.*]] : @guaranteed $Klass)
// CHECK-LABEL: } // end sil function 'test_simplify_enum_arg_guaranteed2'
sil [ossa] @test_simplify_enum_arg_guaranteed2 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  specify_test "simplify_cfg_simplify_argument @block[1] 0"
  %b = begin_borrow %0 : $Klass
  %1 = struct $NonTrivialStruct(%b : $Klass) 
  %c = copy_value %1 : $NonTrivialStruct
  br bb1(%1 : $NonTrivialStruct)

bb1(%3 : @guaranteed $NonTrivialStruct):
  %4 = struct_extract %3 : $NonTrivialStruct, #NonTrivialStruct.val
  %f = function_ref @use_klass : $@convention(thin) (@guaranteed Klass) -> ()
  apply %f(%4) : $@convention(thin) (@guaranteed Klass) -> ()
  br bb2

bb2:
  destroy_value %c : $NonTrivialStruct
  end_borrow %b : $Klass
  destroy_value %0 : $Klass
  %t = tuple ()
  return %t : $()
}

