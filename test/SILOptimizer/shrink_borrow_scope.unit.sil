// RUN: %target-sil-opt -test-runner %s 2>&1 | %FileCheck %s

import Builtin
import Swift

class C {}

struct X {}

sil [ossa] @get_owned_c : $@convention(thin) () -> (@owned C)
sil [ossa] @callee_guaranteed: $@convention(thin) (@guaranteed C) -> ()
sil [ossa] @barrier : $@convention(thin) () -> ()


// CHECK-LABEL: begin running test 1 of {{[^,]+}} on nohoist_over_rewritten_copy
// CHECK-NOT: DELETED:
// CHECK-NOT: end_borrow
// CHECK: Result: did not shrink
// CHECK-LABEL: end running test 1 of {{[^,]+}} on nohoist_over_rewritten_copy
sil [ossa] @nohoist_over_rewritten_copy : $@convention(thin) () -> (@owned C, @owned C) {
entry:
  specify_test "shrink_borrow_scope %lifetime"
  %get_owned_c = function_ref @get_owned_c : $@convention(thin) () -> (@owned C)
  %instance = apply %get_owned_c() : $@convention(thin) () -> (@owned C)
  %lifetime = begin_borrow [lexical] %instance : $C
  debug_value [trace] %lifetime : $C
  %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
  apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
  %copy = copy_value %lifetime : $C
  debug_value [trace] %copy : $C
  end_borrow %lifetime : $C
  %retval = tuple (%copy : $C, %instance : $C)
  return %retval : $(C, C)
}

// CHECK-LABEL: begin running test {{.*}} on nohoist_over_access_scope_barrier_1
// CHECK:       Result: did not shrink
// CHECK-LABEL: end running test {{.*}} on nohoist_over_access_scope_barrier_1
sil [ossa] @nohoist_over_access_scope_barrier_1 : $@convention(thin) (@guaranteed C, @inout X) -> () {
entry(%c : @guaranteed $C, %addr : $*X):
  %borrow = begin_borrow %c : $C
  specify_test "shrink_borrow_scope %borrow"
  %access = begin_access [modify] [dynamic] %addr : $*X
  cond_br undef, kill_introducer, newly_local_gen

kill_introducer:
  cond_br undef, left, right

left:
  %barrier = function_ref @barrier : $@convention(thin) () -> ()
  apply %barrier() : $@convention(thin) () -> ()
  end_access %access : $*X
  end_borrow %borrow : $C
  br exit

right:
  end_access %access : $*X
  end_borrow %borrow : $C
  br exit

newly_local_gen:
  end_access %access : $*X
  end_borrow %borrow : $C
  br exit

exit:
  %retval = tuple ()
  return %retval : $()
}

class Klass {}

public struct Wrapper {
  var _k: Klass
}

sil @get_wrapper : $@convention(thin) () -> @owned Wrapper
sil @use_klass : $@convention(thin) (@guaranteed Klass) -> ()

sil [ossa] @borrow_loadable_prop : $@convention(method) (@guaranteed Wrapper) -> @guaranteed Klass {
bb0(%0 : @guaranteed $Wrapper):
  %2 = struct_extract %0, #Wrapper._k
  return %2
}

// CHECK-LABEL: begin running test {{.*}} on test_borrow_accessor_noopt
// CHECK:       Result: did not shrink
// CHECK-LABEL: end running test {{.*}} on test_borrow_accessor_noopt
sil [ossa] @test_borrow_accessor_noopt : $@convention(thin) () -> () {
bb0:
  %1 = function_ref @get_wrapper : $@convention(thin) () -> @owned Wrapper
  %2 = apply %1() : $@convention(thin) () -> @owned Wrapper
  %3 = begin_borrow %2
  specify_test "shrink_borrow_scope %3"
  %4 = function_ref @borrow_loadable_prop : $@convention(method) (@guaranteed Wrapper) -> @guaranteed Klass
  %5 = apply %4(%3) : $@convention(method) (@guaranteed Wrapper) -> @guaranteed Klass
  %6 = function_ref @use_klass : $@convention(thin) (@guaranteed Klass) -> ()
  %7 = apply %6(%5) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %3
  destroy_value %2
  %10 = tuple ()
  return %10
}
