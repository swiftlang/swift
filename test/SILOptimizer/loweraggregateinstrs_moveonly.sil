// RUN: %target-sil-opt -sil-print-types -enable-sil-verify-all -lower-aggregate-instrs %s | %FileCheck %s

sil_stage canonical

import Builtin
import Swift

struct S : ~Copyable {
  deinit {}
}
struct S2 : ~Copyable {
  var s1 = S()
  var s2 = S()
}

// Test that a struct-with-deinit is preserved on both members s1 and s2.
//
// public func testDeinitTwo() {
//   var s = S2()
// }
//
// CHECK-LABEL: sil @testDeinitTwo : $@convention(thin) () -> () {
// CHECK: struct_extract [[S2:%.*]] : $S2, #S2.s1
// CHECK: release_value %{{.*}} : $S
// CHECK: struct_extract [[S2]] : $S2, #S2.s2
// CHECK: release_value %{{.*}} : $S
// CHECK-LABEL: } // end sil function 'testDeinitTwo'
sil @testDeinitTwo : $@convention(thin) () -> () {
bb0:
  %0 = struct $S ()
  %1 = struct $S2 (%0 : $S, %0 : $S)
  release_value %1 : $S2
  %5 = tuple ()
  return %5 : $()
}
