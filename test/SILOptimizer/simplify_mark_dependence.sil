// RUN: %target-sil-opt %s -onone-simplification -simplify-instruction=mark_dependence -enable-experimental-feature LifetimeDependence | %FileCheck %s

// REQUIRES: swift_feature_LifetimeDependence

import Swift
import Builtin

class B {}

struct S {
  var a: B
  var b: B
}

struct NE: ~Escapable {}

struct S2: ~Escapable {
  var a: NE
}

// CHECK-LABEL: sil [ossa] @mark_dependence_trivial_base :
// CHECK:         %2 = copy_value %0
// CHECK-NEXT:    return %2
// CHECK:       } // end sil function 'mark_dependence_trivial_base'
sil [ossa] @mark_dependence_trivial_base : $@convention(thin) (@guaranteed B, Int) -> @owned B {
bb0(%0 : @guaranteed $B, %1 : $Int):
  %2 = copy_value %0
  %3 = mark_dependence %2 on %1
  return %3
}

// CHECK-LABEL: sil [ossa] @mark_dependence_trivial_base_addr :
// CHECK:         %3 = mark_dependence %2 on %1
// CHECK:       } // end sil function 'mark_dependence_trivial_base_addr'
sil [ossa] @mark_dependence_trivial_base_addr : $@convention(thin) (@guaranteed B, @in_guaranteed Int) -> @owned B {
bb0(%0 : @guaranteed $B, %1 : $*Int):
  %2 = copy_value %0
  %3 = mark_dependence %2 on %1
  return %3
}

// CHECK-LABEL: sil [ossa] @mark_dependence_non_trivial_base :
// CHECK:         %2 = copy_value %0
// CHECK-NEXT:    %3 = mark_dependence %2 on %1
// CHECK-NEXT:    return %3
// CHECK:       } // end sil function 'mark_dependence_non_trivial_base'
sil [ossa] @mark_dependence_non_trivial_base : $@convention(thin) (@guaranteed B, @guaranteed B) -> @owned B {
bb0(%0 : @guaranteed $B, %1 : @guaranteed $B):
  %2 = copy_value %0
  %3 = mark_dependence %2 on %1
  return %3
}

// CHECK-LABEL: sil [ossa] @mark_dependence_projection :
// CHECK:         %1 = struct_element_addr %0, #S.a
// CHECK:         %2 = load [copy] %1
// CHECK-NEXT:    return %2
// CHECK:       } // end sil function 'mark_dependence_projection'
sil [ossa] @mark_dependence_projection : $@convention(thin) (@in_guaranteed S) -> @owned B {
bb0(%0 : $*S):
  %1 = struct_element_addr %0, #S.a
  %2 = mark_dependence %1 on %0
  %3 = load [copy] %2
  return %3
}

// CHECK-LABEL: sil [ossa] @mark_dependence_wrong_projection :
// CHECK:         %2 = mark_dependence %0 on %1
// CHECK:       } // end sil function 'mark_dependence_wrong_projection'
sil [ossa] @mark_dependence_wrong_projection : $@convention(thin) (@in_guaranteed S) -> @owned S {
bb0(%0 : $*S):
  %1 = struct_element_addr %0, #S.a
  %2 = mark_dependence %0 on %1
  %3 = load [copy] %2
  return %3
}

// CHECK-LABEL: sil [ossa] @mark_dependence_wrong_projection2 :
// CHECK:         %3 = mark_dependence %1 on %2
// CHECK:       } // end sil function 'mark_dependence_wrong_projection2'
sil [ossa] @mark_dependence_wrong_projection2 : $@convention(thin) (@in_guaranteed S) -> @owned B {
bb0(%0 : $*S):
  %1 = struct_element_addr %0, #S.a
  %2 = struct_element_addr %0, #S.b
  %3 = mark_dependence %1 on %2
  %4 = load [copy] %3
  return %4
}

// CHECK-LABEL: sil [ossa] @mark_dependence_non_escapable_projection :
// CHECK:         %2 = mark_dependence %1 on %0
// CHECK:       } // end sil function 'mark_dependence_non_escapable_projection'
sil [ossa] @mark_dependence_non_escapable_projection : $@convention(thin) (@in_guaranteed S2) -> @owned NE {
bb0(%0 : $*S2):
  %1 = struct_element_addr %0, #S2.a
  %2 = mark_dependence %1 on %0
  %3 = load [copy] %2
  return %3
}

// CHECK-LABEL: sil [ossa] @mark_dependence_string_literal :
// CHECK:         %1 = string_literal utf8 "a"
// CHECK:         %2 = struct $UnsafePointer<Int8> (%1)
// CHECK:         return %2
// CHECK:       } // end sil function 'mark_dependence_string_literal'
sil [ossa] @mark_dependence_string_literal : $@convention(thin) (@guaranteed Builtin.NativeObject) -> UnsafePointer<Int8> {
bb0(%0 : @guaranteed $Builtin.NativeObject):
  %1 = string_literal utf8 "a"
  %2 = struct $UnsafePointer<Int8> (%1)
  %3 = mark_dependence %2 on %0
  return %3
}

// CHECK-LABEL: sil [ossa] @mark_dependence_non_literal :
// CHECK:         %2 = struct
// CHECK-NEXT:    %3 = mark_dependence %2 on %1
// CHECK-NEXT:    return %3
// CHECK:       } // end sil function 'mark_dependence_non_literal'
sil [ossa] @mark_dependence_non_literal : $@convention(thin) (Builtin.RawPointer, @guaranteed Builtin.NativeObject) -> UnsafePointer<Int8> {
bb0(%0 : $Builtin.RawPointer, %1 : @guaranteed $Builtin.NativeObject):
  %2 = struct $UnsafePointer<Int8> (%0)
  %3 = mark_dependence %2 on %1
  return %3
}

// CHECK-LABEL: sil @mark_dependence_base :
// CHECK-NOT:     init_existential_ref
// CHECK-NOT:     enum
// CHECK:         %2 = mark_dependence %0 on %1
// CHECK-NEXT:    %3 = load %2
// CHECK-NEXT:    return %3
// CHECK:       } // end sil function 'mark_dependence_base'
sil @mark_dependence_base : $@convention(thin) (@inout Builtin.Int64, @owned B) -> Builtin.Int64 {
bb0(%0 : $*Builtin.Int64, %1 : $B):
  %2 = init_existential_ref %1 : $B : $B, $AnyObject
  %3 = enum $Optional<AnyObject>, #Optional.some!enumelt, %2
  %4 = mark_dependence %0 on %3
  %5 = load %4
  return %5
}

// CHECK-LABEL: sil @mark_dependence_base2 :
// CHECK-NOT:     init_existential_ref
// CHECK-NOT:     open_existential_ref
// CHECK:         %2 = mark_dependence %0 on %1
// CHECK-NEXT:    %3 = load %2
// CHECK-NEXT:    return %3
// CHECK:       } // end sil function 'mark_dependence_base2'
sil @mark_dependence_base2 : $@convention(thin) (@inout Builtin.Int64, @owned B) -> Builtin.Int64 {
bb0(%0 : $*Builtin.Int64, %1 : $B):
  %2 = init_existential_ref %1 : $B : $B, $AnyObject
  %3 = open_existential_ref %2 to $@opened("B674783A-EF08-11E7-97D6-8C85900CB088", AnyObject) Self
  %4 = mark_dependence %0 on %3
  %5 = load %4
  return %5
}

