// RUN: %target-sil-opt -test-runner \
// RUN: -enable-experimental-feature Lifetimes \
// RUN: %s -o /dev/null 2>&1 | %FileCheck %s

// REQUIRES: swift_feature_Lifetimes

sil_stage raw

import Builtin
import Swift

class C {}
class D {
  var object: C
}

struct S {
  let c: C
}

struct MutNE: ~Copyable & ~Escapable {}

sil @getMutNE : $@convention(thin) (@inout S) -> @lifetime(borrow 0) @owned MutNE

// An address live range can be extended by a dependent value.
//
// CHECK-LABEL: testMarkDepAddressBase: address_ownership_live_range with: %f0
// CHECK-NEXT: Address:   [[F0:%.*]] = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: Base: class  -   [[F0]] = ref_element_addr %0 : $D, #D.object
// CHECK:      borrow: functionArgument(%0 = argument of bb0 : $D
// CHECK-NEXT: begin:      [[F0]] = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: ends:       end_borrow %{{.*}} : $C
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:  %{{.*}} = load_borrow %{{.*}} : $*C
// CHECK-NEXT:             %{{.*}} = mark_dependence %{{.*}} : $*C on [[F0]] : $*C
// CHECK-NEXT:             [[F0]] = ref_element_addr %0 : $D, #D.object
// CHECK-LABEL: end running test 1 of 1 on testMarkDepAddressBase: address_ownership_live_range with: %f0
sil [ossa] @testMarkDepAddressBase : $@convention(thin) (@guaranteed D, @guaranteed D) -> () {
bb0(%0 : @guaranteed $D, %1 : @guaranteed $D):
  %f0 = ref_element_addr %0 : $D, #D.object
  %f1 = ref_element_addr %1 : $D, #D.object
  specify_test "address_ownership_live_range %f0 %f0"
  %dependence = mark_dependence %f1 on %f0
  %load = load_borrow %dependence
  end_borrow %load
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInoutAtModify: address_ownership_live_range
// CHECK: Address: %0 = argument of bb0 : $*S
// CHECK: Begin:   [[ACCESS:%[0-9]+]] = begin_access [modify] [unknown] %0 : $*S
// CHECK: local:   %0 = argument of bb0 : $*S
// CHECK: begin:   %{{.*}} = alloc_box ${ let MutNE }, let, name "ne"
// CHECK: ends:    unreachable
// CHECK:          return
// CHECK: exits:
// CHECK: interiors:  end_access
// CHECK-LABEL: testInoutAtModify: address_ownership_live_range
sil hidden [ossa] @testInoutAtModify : $@convention(thin) (@inout S) -> () {
bb0(%0 : $*S):
  %1 = alloc_box ${ let MutNE }, let, name "ne"
  %2 = begin_borrow [lexical] [var_decl] %1
  %3 = project_box %2, 0
  %4 = begin_access [modify] [unknown] %0
  specify_test "address_ownership_live_range %0 %4"

  %6 = function_ref @getMutNE : $@convention(thin) (@inout S) -> @lifetime(borrow 0) @owned MutNE
  %7 = apply %6(%4) : $@convention(thin) (@inout S) -> @lifetime(borrow 0) @owned MutNE
  store %7 to [init] %3
  end_access %4
  %10 = mark_unresolved_non_copyable_value [no_consume_or_assign] %3
  %11 = load_borrow %10
  cond_br undef, bb1, bb2

bb1:
  end_borrow %11
  end_borrow %2
  destroy_value %1
  %15 = tuple ()
  return %15

bb2:
  end_borrow %11
  end_borrow %2
  dealloc_box [dead_end] %1
  unreachable
}
