// RUN: %target-sil-opt %s \
// RUN:   --lifetime-dependence-scope-fixup \
// RUN:   -sil-verify-all \
// RUN:   -enable-experimental-feature LifetimeDependence \
// RUN:   2>&1 | %FileCheck %s

// REQUIRES: swift_in_compiler
// REQUIRES: swift_feature_LifetimeDependence

// Test the SIL representation for lifetime dependence scope fixup.

sil_stage raw

import Builtin
import Swift

struct NE : ~Escapable {
}

struct Wrapper : ~Escapable {
  @_hasStorage var _ne: NE { get set }
  var ne: NE { get set } // _read
  init(_ ne: consuming NE)
}

struct NCContainer : ~Copyable {
  @_hasStorage let ptr: UnsafeRawBufferPointer { get }
  @_hasStorage let c: Int { get }
  init(_ ptr: UnsafeRawBufferPointer, _ c: Int)
  var ne: NE { get } // _read
  var wrapper: Wrapper { get } // _read
}

sil [ossa] @Wrapper_init : $@convention(method) (@owned NE, @thin Wrapper.Type) -> @lifetime(copy 0) @owned Wrapper

sil [ossa] @NCContainer_ne_read : $@yield_once @convention(method) (@guaranteed NCContainer) -> @lifetime(borrow 0) @yields @guaranteed NE

// NCContainer.wrapper._read:
//   var wrapper: Wrapper {
//     _read {
//       yield Wrapper(view)
//     }
//   }
//
// Sink end_apply into the resume and unwind paths.
//
// CHECK-LABEL: sil hidden [ossa] @NCContainer_wrapper_read : $@yield_once @convention(method) (@guaranteed NCContainer) -> @lifetime(borrow 0) @yields @guaranteed Wrapper {
// CHECK: ([[YIELD:%.*]], [[TOKEN:%.*]]) = begin_apply %{{.*}}(%0) : $@yield_once @convention(method) (@guaranteed NCContainer) -> @lifetime(borrow 0) @yields @guaranteed NE
// CHECK:   [[MD:%.*]] = mark_dependence [unresolved] [[YIELD]] on [[TOKEN]]
// CHECK:   [[CP:%.*]] = copy_value [[MD]]
// CHECK:   [[WRAPPER:%.*]] = apply %{{.*}}([[CP]], %{{.*}}) : $@convention(method) (@owned NE, @thin Wrapper.Type) -> @lifetime(copy 0) @owned Wrapper
// CHECK:   yield [[WRAPPER]], resume bb1, unwind bb2
// CHECK: bb1:
// CHECK:   destroy_value [[WRAPPER]]
// CHECK:   end_apply [[TOKEN]] as $()
// CHECK:   return
// CHECK: bb2:
// CHECK:   destroy_value [[WRAPPER]]
// CHECK:   end_apply [[TOKEN]] as $()
// CHECK:   unwind
// CHECK-LABEL: } // end sil function 'NCContainer_wrapper_read'
sil hidden [ossa] @NCContainer_wrapper_read : $@yield_once @convention(method) (@guaranteed NCContainer) -> @lifetime(borrow 0) @yields @guaranteed Wrapper {
bb0(%0 : @guaranteed $NCContainer):
  debug_value %0, let, name "self", argno 1
  %2 = metatype $@thin Wrapper.Type
  %3 = function_ref @NCContainer_ne_read : $@yield_once @convention(method) (@guaranteed NCContainer) -> @lifetime(borrow 0) @yields @guaranteed NE
  (%4, %5) = begin_apply %3(%0) : $@yield_once @convention(method) (@guaranteed NCContainer) -> @lifetime(borrow 0) @yields @guaranteed NE
  %6 = mark_dependence [unresolved] %4 on %5
  %7 = copy_value %6
  %8 = end_apply %5 as $()
  %9 = function_ref @Wrapper_init : $@convention(method) (@owned NE, @thin Wrapper.Type) -> @lifetime(copy 0) @owned Wrapper
  %10 = apply %9(%7, %2) : $@convention(method) (@owned NE, @thin Wrapper.Type) -> @lifetime(copy 0) @owned Wrapper
  yield %10, resume bb1, unwind bb2

bb1:
  destroy_value %10
  %13 = tuple ()
  return %13

bb2:
  destroy_value %10
  unwind
}

sil @pointeeAddressor : $@convention(method) <τ_0_0 where τ_0_0 : ~Copyable> (UnsafePointer<τ_0_0>) -> UnsafePointer<τ_0_0>

// Test dependence on a loaded trivial value. The dependence scope should not be on the access scope, which is narrower
// than the scope of the loaded value.
//
// CHECK-LABEL: sil hidden [ossa] @testTrivialAccess : $@convention(thin) (UnsafePointer<Int64>) -> () {
// CHECK: bb0(%0 : $UnsafePointer<Int64>):
// CHECK:   [[ACCESS:%.*]] = begin_access [read] [unknown]
// CHECK:   [[LD:%.*]] = load [trivial] [[ACCESS]]
// CHECK:   end_access [[ACCESS]]
// CHECK:   [[ADR:%.*]] = pointer_to_address %{{.*}} to [strict] $*Int64
// CHECK:   [[MD:%.*]] = mark_dependence [unresolved] [[ADR]] on [[LD]]
// CHECK:   [[ACCESS2:%.*]] = begin_access [read] [unsafe] [[MD]]
// CHECK:   end_access [[ACCESS2]]
// CHECK-LABEL: } // end sil function 'testTrivialAccess'
sil hidden [ossa] @testTrivialAccess : $@convention(thin) (UnsafePointer<Int64>) -> () {
bb0(%0 : $UnsafePointer<Int64>):
  debug_value %0, let, name "p", argno 1
  %2 = alloc_box ${ var UnsafePointer<Int64> }, var, name "ptr"
  %3 = begin_borrow [var_decl] %2
  %4 = project_box %3, 0
  store %0 to [trivial] %4
  %6 = begin_access [read] [unknown] %4
  %7 = load [trivial] %6
  end_access %6
  %9 = function_ref @pointeeAddressor : $@convention(method) <τ_0_0 where τ_0_0 : ~Copyable> (UnsafePointer<τ_0_0>) -> UnsafePointer<τ_0_0>
  %10 = apply %9<Int64>(%7) : $@convention(method) <τ_0_0 where τ_0_0 : ~Copyable> (UnsafePointer<τ_0_0>) -> UnsafePointer<τ_0_0>
  %11 = struct_extract %10, #UnsafePointer._rawValue
  %12 = pointer_to_address %11 to [strict] $*Int64
  %13 = mark_dependence [unresolved] %12 on %7
  %14 = begin_access [read] [unsafe] %13
  %15 = load [trivial] %14
  end_access %14
  end_borrow %3
  destroy_value %2
  %19 = tuple ()
  return %19
}
