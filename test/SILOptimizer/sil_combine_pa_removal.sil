// RUN: %target-sil-opt -enable-sil-verify-all %s -sil-combine | %FileCheck %s

sil_stage canonical

import Builtin
import Swift

// CHECK-LABEL: sil @a_function1
// CHECK-NOT: partial_apply
// CHECK: return
sil @a_function1 : $@convention(thin) (Int64) -> () {
bb0(%0 : $Int64):
  %1 = function_ref @our_closure_function1 : $@convention(thin) (Int64) -> Bool // user: %2
  %2 = partial_apply %1(%0) : $@convention(thin) (Int64) -> Bool // user: %3
  strong_release %2 : $@callee_owned () -> Bool   // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
}

class K {
}

// CHECK-LABEL: sil @a_function2
// The release_value of $K is optimized to a strong_release.
sil @a_function2 : $@convention(thin) (@owned K) -> () {
bb0(%0 : $K):
  %1 = alloc_ref $K
  %2 = function_ref @our_closure_function2 : $@convention(thin) (@owned K) -> Bool // user: %2
// CHECK-NOT: partial_apply
  %3 = partial_apply %2(%0) : $@convention(thin) (@owned K) -> Bool // user: %3
// CHECK: br
  br bb1
 bb1:
// CHECK: strong_release
  strong_release %3 : $@callee_owned () -> Bool   // id: %3
  %5 = tuple ()                                   // user: %5
// CHECK: return
  return %5 : $()                                 // id: %5
}

sil @our_closure_function2 : $@convention(thin) (@owned K) -> Bool
sil @our_closure_function1 : $@convention(thin) (Int64) -> Bool

sil @toBeClosed : $@convention(thin) (@guaranteed @sil_unowned K) -> ()
sil @takeClosure : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> ()

// CHECK-LABEL: sil @opt_partial_apply_of_an_unowned : {{.*}} {
// CHECK:       bb0([[UNOWNED_VALUE:%[^,]+]] :
// CHECK:         [[TO_BE_CLOSED:%[^,]+]] = function_ref @toBeClosed
// CHECK:         unowned_retain [[UNOWNED_VALUE]]
// CHECK:         apply [[TO_BE_CLOSED]]([[UNOWNED_VALUE]])
// CHECK:         unowned_release [[UNOWNED_VALUE]]
// CHECK:         unowned_release [[UNOWNED_VALUE]]
// CHECK-LABEL: } // end sil function 'opt_partial_apply_of_an_unowned'
sil @opt_partial_apply_of_an_unowned : $@convention(thin) (@guaranteed @sil_unowned K) -> () {
bb0(%1 : @closureCapture $@sil_unowned K):
  %678 = function_ref @toBeClosed : $@convention(thin) (@guaranteed @sil_unowned K) -> ()
  %680 = partial_apply [callee_guaranteed] %678(%1) : $@convention(thin) (@guaranteed @sil_unowned K) -> ()
  %681 = function_ref @takeClosure : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> ()
  strong_retain %680 : $@callee_guaranteed () -> ()
  %683 = partial_apply [callee_guaranteed] %681(%680) : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> ()
  %876 = apply %680() : $@callee_guaranteed () -> ()
  strong_release %680 : $@callee_guaranteed  () -> ()
  %retval = tuple ()
  return %retval : $()
}
