// RUN: %target-sil-opt -sil-print-types -enable-sil-verify-all %s -onone-simplification -simplify-instruction=checked_cast_br | %FileCheck %s --check-prefix=CHECK --check-prefix=CHECK-ONONE
// RUN: %target-sil-opt -sil-print-types -enable-sil-verify-all %s -simplification -simplify-instruction=checked_cast_br | %FileCheck %s --check-prefix=CHECK --check-prefix=CHECK-O

// REQUIRES: swift_in_compiler

import Swift
import Builtin

protocol P : AnyObject {}
class B : P {}
class X : B {}

// CHECK-LABEL: sil @test_non_ossa :
// CHECK:         %0 = alloc_ref
// CHECK:         checked_cast_br AnyObject in %0 : $X
// CHECK:       } // end sil function 'test_non_ossa'
sil @test_non_ossa : $@convention(thin) () -> AnyObject {
bb0:
  %0 = alloc_ref $X
  %1 = upcast %0 : $X to $B
  %2 = init_existential_ref %1 : $B : $B, $AnyObject
  checked_cast_br AnyObject in %2 : $AnyObject to X, bb1, bb2

bb1(%5 : $X):
  strong_release %5 : $X
  return %2 : $AnyObject

bb2:
  unreachable
}

// CHECK-LABEL: sil [ossa] @test_ossa :
// CHECK:         %0 = alloc_ref
// CHECK-O-NEXT:  checked_cast_br AnyObject in %0 : $X
// CHECK-ONONE:   checked_cast_br AnyObject in %2 : $AnyObject
// CHECK-O:     bb2([[A:%.*]] : @owned $X):
// CHECK-O-NEXT:  [[U:%.*]] = upcast [[A]] : $X to $B
// CHECK-O-NEXT:  [[E:%.*]] = init_existential_ref [[U]] : $B
// CHECK-O-NEXT:  destroy_value [[E]]
// CHECK-ONONE: bb2(%{{[0-9]+}} : @owned $AnyObject):
// CHECK:       } // end sil function 'test_ossa'
sil [ossa] @test_ossa : $@convention(thin) () -> @owned X {
bb0:
  %0 = alloc_ref $X
  %1 = upcast %0 : $X to $B
  %2 = init_existential_ref %1 : $B : $B, $AnyObject
  debug_value %2 : $AnyObject, name "x"
  checked_cast_br AnyObject in %2 : $AnyObject to X, bb1, bb2

bb1(%5 : @owned $X):
  return %5 : $X

bb2(%7 : @owned $AnyObject):
  destroy_value %7: $AnyObject
  unreachable
}

// CHECK-LABEL: sil [ossa] @test_ossa_multiple_uses :
// CHECK:         checked_cast_br B in %1 : $B
// CHECK:       } // end sil function 'test_ossa_multiple_uses'
sil [ossa] @test_ossa_multiple_uses : $@convention(thin) () -> @owned X {
bb0:
  %0 = alloc_ref $X
  %1 = upcast %0 : $X to $B
  fix_lifetime %1 : $B
  checked_cast_br B in %1 : $B to X, bb1, bb2

bb1(%5 : @owned $X):
  return %5 : $X

bb2(%7 : @owned $B):
  destroy_value %7: $B
  unreachable
}

// CHECK-LABEL: sil [ossa] @test_borrow :
// CHECK:         %1 = begin_borrow
// CHECK-NEXT:    checked_cast_br any P in %1 : $X
// CHECK:       bb2([[A:%.*]] : @guaranteed $X):
// CHECK-NEXT:    [[U:%.*]] = upcast [[A]] : $X to $B
// CHECK-NEXT:    [[E:%.*]] = init_existential_ref [[U]] : $B
// CHECK-NEXT:    fix_lifetime [[E]]
// CHECK:       } // end sil function 'test_borrow'
sil [ossa] @test_borrow : $@convention(thin) () -> () {
bb0:
  %0 = alloc_ref $X
  %1 = begin_borrow %0 : $X
  %2 = upcast %1 : $X to $B
  %3 = init_existential_ref %2 : $B : $B, $P
  checked_cast_br P in %3 : $P to X, bb1, bb2

bb1(%5 : @guaranteed $X):
  end_borrow %1 : $X
  destroy_value %0: $X
  %8 = tuple ()
  return %8 : $()

bb2(%10 : @guaranteed $P):
  fix_lifetime %10 : $P
  destroy_value %0: $X
  unreachable
}

sil_vtable X {
}
