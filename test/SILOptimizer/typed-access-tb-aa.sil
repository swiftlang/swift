// RUN: %target-sil-opt %s -dump-alias-info -o /dev/null | %FileCheck %s

// REQUIRES: asserts

import Builtin

///////////////////////
// Type Declarations //
///////////////////////

class foo {
   deinit
  init()
}

class boo : foo {
   deinit
  override init()
}

class baz : foo {
   deinit
  override init()
}

class goo : boo {
   deinit
  override init()
}

sil @boo_init : $@convention(thin) (@thick boo.Type) -> @owned boo
sil @baz_init : $@convention(thin) (@thick baz.Type) -> @owned baz
sil @goo_init : $@convention(thin) (@thick goo.Type) -> @owned goo

// CHECK-LABEL: no_parent_child_relation_reftype_tests
// CHECK: PAIR #1.
// CHECK-NEXT:   %0 = alloc_stack $boo
// CHECK-NEXT:   %1 = alloc_stack $baz
// CHECK-NEXT: NoAlias
sil hidden @no_parent_child_relation_reftype_tests : $@convention(thin) () -> () {
bb0:
  %0 = alloc_stack $boo, var, name "a"                 // users: %5, %14
  %1 = alloc_stack $baz, var, name "b"                 // users: %9, %13
  %2 = function_ref @boo_init : $@convention(thin) (@thick boo.Type) -> @owned boo // user: %4
  %3 = metatype $@thick boo.Type                  // user: %4
  %4 = apply %2(%3) : $@convention(thin) (@thick boo.Type) -> @owned boo // users: %5, %11
  store %4 to %0 : $*boo                        // id: %5
  %6 = function_ref @baz_init : $@convention(thin) (@thick baz.Type) -> @owned baz // user: %8
  %7 = metatype $@thick baz.Type                  // user: %8
  %8 = apply %6(%7) : $@convention(thin) (@thick baz.Type) -> @owned baz // users: %9, %10
  store %8 to %1 : $*baz                        // id: %9
  strong_release %8 : $baz                        // id: %10
  strong_release %4 : $boo                        // id: %11
  %12 = tuple ()                                  // user: %15
  dealloc_stack %1 : $*baz       // id: %13
  dealloc_stack %0 : $*boo       // id: %14
  return %12 : $()                                // id: %15
}

// CHECK-LABEL: with_parent_child_relation_reftype_tests

// CHECK: PAIR #33.
// CHECK-NEXT:   %4 = apply %2(%3) : $@convention(thin) (@thick boo.Type) -> @owned boo
// CHECK-NEXT:   %8 = apply %6(%7) : $@convention(thin) (@thick goo.Type) -> @owned goo
// CHECK-NEXT: MayAlias
sil hidden @with_parent_child_relation_reftype_tests : $@convention(thin) () -> () {
bb0:
  %0 = alloc_stack $boo, var, name "a"                 // users: %5, %14
  %1 = alloc_stack $goo, var, name "b"                 // users: %9, %13
  %2 = function_ref @boo_init : $@convention(thin) (@thick boo.Type) -> @owned boo // user: %4
  %3 = metatype $@thick boo.Type                  // user: %4
  %4 = apply %2(%3) : $@convention(thin) (@thick boo.Type) -> @owned boo // users: %5, %11
  store %4 to %0 : $*boo                        // id: %5
  %6 = function_ref @goo_init : $@convention(thin) (@thick goo.Type) -> @owned goo // user: %8
  %7 = metatype $@thick goo.Type                  // user: %8
  %8 = apply %6(%7) : $@convention(thin) (@thick goo.Type) -> @owned goo // users: %9, %10
  store %8 to %1 : $*goo                        // id: %9
  strong_release %8 : $goo                        // id: %10
  strong_release %4 : $boo                        // id: %11
  %12 = tuple ()                                  // user: %15
  dealloc_stack %1 : $*goo       // id: %13
  dealloc_stack %0 : $*boo       // id: %14
  return %12 : $()                                // id: %15
}

// CHECK-LABEL: @builtin_test

// Check that a raw pointer address may alias everything.

// CHECK:      PAIR #0.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #1.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #2.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #3.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #4.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #5.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #6.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64
// CHECK-NEXT:   MayAlias


// Now check that a NativeObject and AnyObject alias everything.
// This is a conservative approach. We could (if needed) relax this and don't let object types alias with scalar types.

// CHECK:      PAIR #8.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #9.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #10.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #11.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #12.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #13.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #15.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #16.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #17.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #18.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #19.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64
// CHECK-NEXT:   MayAlias

// Check that scalar types don't alias different scalar types.

// CHECK:      PAIR #21.
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #22.
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #23.
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #24.
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #26.
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #27.
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #28.
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #30.
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #31.
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #33.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64
// CHECK-NEXT:   MayAlias

sil @builtin_test : $@convention(thin) () -> () {
bb0:
  %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
  %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
  %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.AnyObject
  %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
  %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
  %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
  %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE64

  fix_lifetime %0 : $*Builtin.RawPointer
  fix_lifetime %1 : $*Builtin.NativeObject
  fix_lifetime %2 : $*Builtin.AnyObject
  fix_lifetime %3 : $*Builtin.Int8
  fix_lifetime %4 : $*Builtin.Int32
  fix_lifetime %5 : $*Builtin.FPIEEE32
  fix_lifetime %6 : $*Builtin.FPIEEE64

  %21 = tuple()
  return %21 : $()
}


// Make sure that struct addresses:
//
// 1. Alias address types that they contain.
// 2. Do not alias address types that they do not contain.
// 3. Aliases raw pointers.
// 4. Aliases builtin objects (this is conservative!).

// CHECK-LABEL: @struct_tests

// CHECK:      PAIR #6.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S1
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #18.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S2
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #29.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_E1
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #39.
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_E2
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #48.
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_C1
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #56.
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_C2
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #63.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #64.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:     %7 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #65.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:     %8 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #66.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:     %9 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #67.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:     %10 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #68.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3
// CHECK-NEXT:     %11 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:   NoAlias

struct STest_S1 {
  var a : Builtin.Int32
}
struct STest_S2 {
  var b : Builtin.Int34
}
enum STest_E1 {
  case Yes(STest_S1)
  case No
}
enum STest_E2 {
  case Yes(STest_S2)
  case No
}
class STest_C1 {
  var a : Builtin.Int32

  init()
}
class STest_C2 {
  var a : Builtin.Int64

  init()
}
struct STest_S3 {
  var s : STest_S1
  var e : STest_E1
  var c : STest_C1
}

sil @struct_tests : $@convention(thin) () -> () {
bb0:
  %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S1
  %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S2
  %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_E1
  %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_E2
  %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_C1
  %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_C2
  %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*STest_S3

  %7 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
  %8 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
  %9 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.AnyObject
  %10 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
  %11 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32

  fix_lifetime %0 : $*STest_S1
  fix_lifetime %1 : $*STest_S2
  fix_lifetime %2 : $*STest_E1
  fix_lifetime %3 : $*STest_E2
  fix_lifetime %4 : $*STest_C1
  fix_lifetime %5 : $*STest_C2
  fix_lifetime %6 : $*STest_S3
  fix_lifetime %7 : $*Builtin.RawPointer
  fix_lifetime %8 : $*Builtin.NativeObject
  fix_lifetime %9 : $*Builtin.AnyObject
  fix_lifetime %10 : $*Builtin.Int32
  fix_lifetime %11 : $*Builtin.FPIEEE32

  %9999 = tuple()
  return %9999 : $()
}

// CHECK-LABEL: @enum_tests

// CHECK:      PAIR #6.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_S1
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #18.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_S2
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #29.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E1
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #39.
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E2
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #48.
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_C1
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #56.
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_C2
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #63.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #64.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:     %7 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #65.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:     %8 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #66.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:     %9 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #67.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:     %10 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #68.
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3
// CHECK-NEXT:     %11 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32
// CHECK-NEXT:   NoAlias

struct ETest_S1 {
  var a : Builtin.Int32
}
struct ETest_S2 {
  var b : Builtin.Int34
}
enum ETest_E1 {
  case Yes(ETest_S1)
  case No
}
enum ETest_E2 {
  case Yes(ETest_S2)
  case No
}
class ETest_C1 {
  var a : Builtin.Int32

  init()
}
class ETest_C2 {
  var a : Builtin.Int64

  init()
}
enum ETest_E3 {
  case S(ETest_S1)
  case E(ETest_E1)
  case C(ETest_C1)
  case Unknown
}

sil @enum_tests : $@convention(thin) () -> () {
bb0:
  %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_S1
  %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_S2
  %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E1
  %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E2
  %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_C1
  %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_C2
  %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*ETest_E3

  %7 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
  %8 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
  %9 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.AnyObject
  %10 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
  %11 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32

  fix_lifetime %0 : $*ETest_S1
  fix_lifetime %1 : $*ETest_S2
  fix_lifetime %2 : $*ETest_E1
  fix_lifetime %3 : $*ETest_E2
  fix_lifetime %4 : $*ETest_C1
  fix_lifetime %5 : $*ETest_C2
  fix_lifetime %6 : $*ETest_E3
  fix_lifetime %7 : $*Builtin.RawPointer
  fix_lifetime %8 : $*Builtin.NativeObject
  fix_lifetime %9 : $*Builtin.AnyObject
  fix_lifetime %10 : $*Builtin.Int32
  fix_lifetime %11 : $*Builtin.FPIEEE32

  %9999 = tuple()
  return %9999 : $()
}

// Classes are treated conservatively.

// CHECK-LABEL: @class_tests

// CHECK:      PAIR #0.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #1.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C2
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #2.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C3
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #3.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*any AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #4.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #5.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #6.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:     %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #7.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
// CHECK-NEXT:     %7 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:   NoAlias

class CTest_C1 {
  var x : Builtin.Int32

  init()
}

class CTest_C2 {
  var z : Builtin.FPIEEE32

  init()
}

class CTest_C3 : CTest_C1 {
  var y : Builtin.Int8

  override init()
}

protocol AnyObject {}

sil @class_tests : $@convention(thin) () -> () {
bb0:
  %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C1
  %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C2
  %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*CTest_C3
  %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject

  %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
  %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.NativeObject
  %6 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.AnyObject
  %7 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
  %8 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
  %9 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.FPIEEE32

  fix_lifetime %0 : $*CTest_C1
  fix_lifetime %1 : $*CTest_C2
  fix_lifetime %2 : $*CTest_C3
  fix_lifetime %3 : $*AnyObject
  fix_lifetime %4 : $*Builtin.RawPointer
  fix_lifetime %5 : $*Builtin.NativeObject
  fix_lifetime %6 : $*Builtin.AnyObject
  fix_lifetime %7 : $*Builtin.Int8
  fix_lifetime %8 : $*Builtin.Int32
  fix_lifetime %9 : $*Builtin.FPIEEE32

  %9999 = tuple()
  return %9999 : $()
}


// CHECK-LABEL: @tuple_tests

// CHECK:      PAIR #0.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(Builtin.RawPointer, Builtin.Int64)
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(Builtin.RawPointer, Builtin.Int64)
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #1.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(Builtin.RawPointer, Builtin.Int64)
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_S1, Builtin.Int64)
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #2.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(Builtin.RawPointer, Builtin.Int64)
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_E1, Builtin.Int64)
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #3.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(Builtin.RawPointer, Builtin.Int64)
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #4.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(Builtin.RawPointer, Builtin.Int64)
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #5.
// CHECK-NEXT:     %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(Builtin.RawPointer, Builtin.Int64)
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #7.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_S1, Builtin.Int64)
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_S1, Builtin.Int64)
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #8.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_S1, Builtin.Int64)
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_E1, Builtin.Int64)
// CHECK-NEXT:   NoAlias
// CHECK:      PAIR #9.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_S1, Builtin.Int64)
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #10.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_S1, Builtin.Int64)
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #11.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_S1, Builtin.Int64)
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #13.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_E1, Builtin.Int64)
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_E1, Builtin.Int64)
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #14.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_E1, Builtin.Int64)
// CHECK-NEXT:     %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #15.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_E1, Builtin.Int64)
// CHECK-NEXT:     %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*AnyObject
// CHECK-NEXT:   MayAlias
// CHECK:      PAIR #16.
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_E1, Builtin.Int64)
// CHECK-NEXT:     %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT:   NoAlias

struct TTest_S1 {
  var x : Builtin.Int32
}

enum TTest_E1 {
  case No
  case Yes(Builtin.Int8)
}

sil @tuple_tests : $@convention(thin) () -> () {
bb0:
  %0 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(Builtin.RawPointer, Builtin.Int64)
  %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_S1, Builtin.Int64)
  %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*(TTest_E1, Builtin.Int64)

  %3 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.RawPointer
  %4 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.AnyObject
  %5 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int32

  fix_lifetime %0 : $*(Builtin.RawPointer, Builtin.Int64)
  fix_lifetime %1 : $*(TTest_S1, Builtin.Int64)
  fix_lifetime %2 : $*(TTest_E1, Builtin.Int64)
  fix_lifetime %3 : $*Builtin.RawPointer
  fix_lifetime %4 : $*Builtin.AnyObject
  fix_lifetime %5 : $*Builtin.Int32

  %9999 = tuple()
  return %9999 : $()
}


// Check that TBAA fails when the root is unchecked_addr_cast or
// pointer_to_address without [strict].
//
// CHECK-LABEL: @tbaa_dump
// CHECK:      PAIR #2.
// CHECK-NEXT:   %0 = argument of bb0 : $*Builtin.Int64
// CHECK-NEXT:   %3 = unchecked_addr_cast %0 : $*Builtin.Int64 to $*Builtin.Int32
// CHECK-NEXT: MayAlias
// CHECK:      PAIR #5.
// CHECK-NEXT:   %0 = argument of bb0 : $*Builtin.Int64
// CHECK-NEXT:   %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*Builtin.Int32
// CHECK-NEXT: MayAlias
// CHECK:      PAIR #6.
// CHECK-NEXT:   %0 = argument of bb0 : $*Builtin.Int64
// CHECK-NEXT:   %9 = pointer_to_address %6 : $Builtin.RawPointer to $*Builtin.Int32
// CHECK-NEXT: MayAlias
sil @tbaa_dump : $@convention(thin) (@in Builtin.Int64) -> Builtin.Int64 {
bb0(%0 : $*Builtin.Int64):
  %1 = integer_literal $Builtin.Int64, 42
  store %1 to %0 : $*Builtin.Int64
  %3 = unchecked_addr_cast %0 : $*Builtin.Int64 to $*Builtin.Int32
  %4 = integer_literal $Builtin.Int32, 0
  store %4 to %3 : $*Builtin.Int32
  %6 = address_to_pointer %0 : $*Builtin.Int64 to $Builtin.RawPointer
  %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*Builtin.Int32
  store %4 to %7 : $*Builtin.Int32
  %9 = pointer_to_address %6 : $Builtin.RawPointer to $*Builtin.Int32
  store %4 to %9 : $*Builtin.Int32
  %10 = load %0 : $*Builtin.Int64
  return %10 : $Builtin.Int64
}

// CHECK-LABEL: @test_project_box
// CHECK:      PAIR #10.
// CHECK-NEXT:   %2 = project_box %0 : $<τ_0_0> { var τ_0_0 } <Builtin.Int32>, 0
// CHECK-NEXT:   %3 = project_box %1 : $<τ_0_0> { var τ_0_0 } <Builtin.Int64>, 0
// CHECK-NEXT: NoAlias
sil @test_project_box : $@convention(thin) (<τ_0_0> { var τ_0_0 } <Builtin.Int32>, <τ_0_0> { var τ_0_0 } <Builtin.Int64>) -> () {
bb0(%0 : $<τ_0_0> { var τ_0_0 } <Builtin.Int32>, %1 : $<τ_0_0> { var τ_0_0 } <Builtin.Int64>):
  %2 = project_box %0 : $<τ_0_0> { var τ_0_0 } <Builtin.Int32>, 0
  %3 = project_box %1 : $<τ_0_0> { var τ_0_0 } <Builtin.Int64>, 0

  fix_lifetime %2 : $*Builtin.Int32
  fix_lifetime %3 : $*Builtin.Int64

  %r = tuple()
  return %r : $()
}

// CHECK-LABEL: @test_ref_tail_addr
// CHECK:      PAIR #10.
// CHECK-NEXT:   %2 = ref_element_addr %0 : $CTest_C1, #CTest_C1.x
// CHECK-NEXT:   %3 = ref_tail_addr %1 : $CTest_C1, $Builtin.Int16
// CHECK-NEXT: NoAlias
sil @test_ref_tail_addr : $@convention(thin) (CTest_C1, CTest_C1) -> () {
bb0(%0 : $CTest_C1, %1 : $CTest_C1):
  %2 = ref_element_addr %0 : $CTest_C1, #CTest_C1.x
  %3 = ref_tail_addr %1 : $CTest_C1, $Builtin.Int16

  fix_lifetime %2 : $*Builtin.Int32
  fix_lifetime %3 : $*Builtin.Int16

  %r = tuple()
  return %r : $()
}

// CHECK-LABEL: @test_generic_struct
// CHECK:      PAIR #5.
// CHECK-NEXT:     %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
// CHECK-NEXT:     %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*GenericStruct<T>
// CHECK-NEXT:   MayAlias

struct GenericStruct<T> {
  var x : T
}

sil @test_generic_struct : $@convention(thin) <T> (@thick T.Type) -> () {
bb0(%0 : $@thick T.Type):
  %1 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*Builtin.Int8
  %2 = pointer_to_address undef : $Builtin.RawPointer to [strict] $*GenericStruct<T>

  fix_lifetime %1 : $*Builtin.Int8
  fix_lifetime %2 : $*GenericStruct<T>

  %9999 = tuple()
  return %9999 : $()
}

