// RUN: %target-sil-opt -sil-print-types -enable-experimental-feature MoveOnlyEnumDeinits -enable-sil-verify-all -sil-combine %s | %FileCheck %s

// REQUIRES: swift_feature_MoveOnlyEnumDeinits

sil_stage canonical

import Builtin
import Swift

struct S : ~Copyable {
  deinit {}
}

struct FileDescriptor: ~Copyable {
  var fd: Builtin.Int64

  init(fd: Builtin.Int64)
  deinit
}

enum MaybeFileDescriptor: ~Copyable {
  case some(FileDescriptor)
  case nothing

  consuming func discard() { discard self }

  deinit
}

struct Wrapper<T>: ~Copyable {
  var t: T
}

struct NonCopyableForwardingStruct : ~Copyable {
  var some: Int
  deinit
}

enum NonCopyableForwardingEnum : ~Copyable {
  case some(Int)
  case nothing
  deinit
}

sil @getWrappedValue : $@convention(thin) <T> (@in_guaranteed Wrapper<T>) -> @out T

// Test that a release_value is not removed for a struct-with-deinit.
// Doing so would forget the deinit.
//
// public func testStructDeinit() {
//   var s = S()
// }
//
// CHECK-LABEL: sil @testStructDeinit : $@convention(thin) () -> () {
// CHECK:         release_value %{{.*}} : $S
// CHECK-LABEL: } // end sil function 'testStructDeinit'
sil @testStructDeinit : $@convention(thin) () -> () {
bb0:
  %0 = struct $S ()
  release_value %0 : $S
  %5 = tuple ()
  return %5 : $()
}

// Test that a release_value is not replaced for a enum-with-deinit.
// Doing so would forget the deinit.
//
// CHECK-LABEL: sil hidden [noinline] @testEnumDeinit : $@convention(thin) () -> () {
// CHECK:   release_value %{{.*}} : $MaybeFileDescriptor
// CHECK-LABEL: } // end sil function 'testEnumDeinit'
sil hidden [noinline] @testEnumDeinit : $@convention(thin) () -> () {
bb0:
  %0 = integer_literal $Builtin.Int64, 0
  %26 = struct $FileDescriptor (%0 : $Builtin.Int64)
  %38 = enum $MaybeFileDescriptor, #MaybeFileDescriptor.some!enumelt, %26 : $FileDescriptor
  release_value %38 : $MaybeFileDescriptor
  %42 = tuple ()
  return %42 : $()
}

// Test that a release of a trivial payload is not removed.
//
// CHECK-LABEL: sil hidden [noinline] @testEnumDeinitTrivialPayload : $@convention(thin) () -> () {
// CHECK:   release_value %{{.*}} : $MaybeFileDescriptor
// CHECK-LABEL: } // end sil function 'testEnumDeinitTrivialPayload'
sil hidden [noinline] @testEnumDeinitTrivialPayload : $@convention(thin) () -> () {
bb0:
  %0 = enum $MaybeFileDescriptor, #MaybeFileDescriptor.nothing!enumelt // users: %2, %1
  debug_value %0 : $MaybeFileDescriptor, var, name "maybe" // id: %1
  release_value %0 : $MaybeFileDescriptor
  %9 = tuple ()
  return %9 : $()
}

// Test that a move into a discarded value does not result in a destroy_addr
//
// CHECK-LABEL: sil @testNoDeinit : $@convention(method) <T> (@in Wrapper<T>) -> @out T {
// CHECK-NOT: destroy_addr
// CHECK-LABEL: } // end sil function 'testNoDeinit'
sil @testNoDeinit : $@convention(method) <T> (@in Wrapper<T>) -> @out T {
bb0(%0 : $*T, %1 : $*Wrapper<T>):
  %2 = function_ref @getWrappedValue : $@convention(thin) <T> (@in_guaranteed Wrapper<T>) -> @out T
  %3 = apply %2<T>(%0, %1) : $@convention(thin) <τ_0_0> (@in_guaranteed Wrapper<τ_0_0>) -> @out τ_0_0 
  %4 = alloc_stack $Wrapper<T>
  copy_addr [take] %1 to [init] %4 : $*Wrapper<T>
  // discard
  dealloc_stack %4 : $*Wrapper<T>
  %9 = tuple ()
  return %9 : $()
}

// CHECK-LABEL: sil hidden [ossa] @testSDeinit : $@convention(method) (@owned S) -> () {
// CHECK: bb0(%0 : @owned $S):
// CHECK:   [[DD:%.*]] = drop_deinit %0 : $S
// CHECK:   destroy_value [[DD]] : $S
// CHECK-LABEL: } // end sil function 'testSDeinit'
sil hidden [ossa] @testSDeinit : $@convention(method) (@owned S) -> () {
bb0(%0 : @owned $S):
  %1 = drop_deinit %0 : $S
  destroy_value %1 : $S
  %64 = tuple ()
  return %64 : $()
}

// Test a "dead" non-Copyable struct-with-deinit that forwards a
// single trivial value. The destroy_value cannot be eliminated
// without first devirtualizing the deinit.
//
// CHECK-LABEL: sil [ossa] @testNonCopyableForwardingStructDeinit : $@convention(thin) (Int) -> () {
// CHECK: [[STRUCT:%[0-9]+]] = struct $NonCopyableForwardingStruct (%0 : $Int)
// CHECK: destroy_value [[STRUCT]]
// CHECK-LABEL: } // end sil function 'testNonCopyableForwardingStructDeinit'
sil [ossa] @testNonCopyableForwardingStructDeinit : $@convention(thin) (Int) -> () {
bb0(%0: $Int):
  %1 = struct $NonCopyableForwardingStruct(%0 : $Int)
  destroy_value %1
  %13 = tuple ()
  return %13
}

// Test a "dead" non-Copyable enum-with-deinit that forwards a single
// trivial value. The destroy_value cannot be eliminated without first
// devirtualizing the deinit.
//
// CHECK-LABEL: sil [ossa] @testNonCopyableForwardingEnumDeinit : $@convention(thin) (Int) -> () {
// CHECK:   [[ENUM:%[0-9]+]] = enum $NonCopyableForwardingEnum, #NonCopyableForwardingEnum.some!enumelt, %0
// CHECK:   destroy_value [[ENUM]]
// CHECK-LABEL: } // end sil function 'testNonCopyableForwardingEnumDeinit'
sil [ossa] @testNonCopyableForwardingEnumDeinit : $@convention(thin) (Int) -> () {
bb0(%0 : $Int):
  %1 = enum $NonCopyableForwardingEnum, #NonCopyableForwardingEnum.some!enumelt, %0
  destroy_value %1
  %13 = tuple ()
  return %13
}

// Test a "dead" non-Copyable enum-with-deinit and an empty case. The
// destroy_value cannot be eliminated without first devirtualizing the
// deinit.
//
// CHECK-LABEL: sil [ossa] @testNonCopyableEmptyEnumDeinit : $@convention(thin) () -> () {
// CHECK:   [[ENUM:%[0-9]+]] = enum $NonCopyableForwardingEnum, #NonCopyableForwardingEnum.nothing
// CHECK:   destroy_value [[ENUM]]
// CHECK-LABEL: } // end sil function 'testNonCopyableEmptyEnumDeinit'
sil [ossa] @testNonCopyableEmptyEnumDeinit : $@convention(thin) () -> () {
bb0:
  %0 = enum $NonCopyableForwardingEnum, #NonCopyableForwardingEnum.nothing
  destroy_value %0
  %13 = tuple ()
  return %13
}
