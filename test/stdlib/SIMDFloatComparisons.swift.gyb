//===--- SIMDFloatComparisons.swift.gyb -----------------------*- swift -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
// RUN: %empty-directory(%t)
// RUN: %gyb %s -o %t/SIMDFloatComparisons.swift
// RUN: %target-swift-frontend -primary-file %t/SIMDFloatComparisons.swift -S | %FileCheck %t/SIMDFloatComparisons.swift --check-prefix=CHECK --check-prefix=CHECK-%target-cpu --check-prefix=CHECKOnone-%target-cpu
// RUN: %target-swift-frontend -primary-file %t/SIMDFloatComparisons.swift -S -O | %FileCheck %t/SIMDFloatComparisons.swift --check-prefix=CHECK --check-prefix=CHECK-%target-cpu --check-prefix=CHECKO-%target-cpu

import Swift

%for bits in [32,64]:
% scalar = {32:'Float',64:'Double'}[bits]
% for totalBits in [64,128]:
%  n = totalBits // bits
%  if n != 1:
%   neonSuffix = str(n) + {8:'b',16:'h',32:'s',64:'d'}[bits]
func compare_eq${n}x${bits}(
  _ a: SIMD${n}<${scalar}>, _ b: SIMD${n}<${scalar}>
) -> SIMDMask<SIMD${n}<Int${bits}>> {
  a .== b
}
// CHECK: compare_eq${n}x${bits}{{[[:alnum:]_]+}}:
// CHECK-x86_64: cmpeqp${'s' if bits == 32 else 'd'}
// CHECK-x86_64: ret
// CHECKO-arm64-NEXT: fcmeq.${neonSuffix} v0, v0, v1
// CHECKO-arm64-NEXT: ret
// CHECKOnone-arm64: fcmeq.${neonSuffix}
// CHECKOnone-arm64: ret

func compare_ne${n}x${bits}(
  _ a: SIMD${n}<${scalar}>, _ b: SIMD${n}<${scalar}>
) -> SIMDMask<SIMD${n}<Int${bits}>> {
  a .!= b
}
// CHECK: compare_ne${n}x${bits}{{[[:alnum:]_]+}}:
// CHECK-x86_64: cmpneqp${'s' if bits == 32 else 'd'}
// CHECK-x86_64: ret
// CHECKO-arm64-NEXT: fcmeq.${neonSuffix} [[TMP:v[0-9]+]], v0, v1
// CHECKO-arm64-NEXT: mvn.${totalBits//8}b v0, [[TMP]]
// CHECKO-arm64-NEXT: ret
// CHECKOnone-arm64: fcmeq.${neonSuffix}
// CHECKOnone-arm64: mvn.${totalBits//8}b
// CHECKOnone-arm64: ret

func compare_lt${n}x${bits}(
  _ a: SIMD${n}<${scalar}>, _ b: SIMD${n}<${scalar}>
) -> SIMDMask<SIMD${n}<Int${bits}>> {
  a .< b
}
// CHECK: compare_lt${n}x${bits}{{[[:alnum:]_]+}}:
// CHECK-x86_64: cmpltp${'s' if bits == 32 else 'd'}
// CHECK-x86_64: ret
// CHECKO-arm64-NEXT: fcmgt.${neonSuffix} v0, v1, v0
// CHECKO-arm64-NEXT: ret
// CHECKOnone-arm64: fcmgt.${neonSuffix}
// CHECKOnone-arm64: ret

func compare_le${n}x${bits}(
  _ a: SIMD${n}<${scalar}>, _ b: SIMD${n}<${scalar}>
) -> SIMDMask<SIMD${n}<Int${bits}>> {
  a .<= b
}
// CHECK: compare_le${n}x${bits}{{[[:alnum:]_]+}}:
// CHECK-x86_64: cmplep${'s' if bits == 32 else 'd'}
// CHECK-x86_64: ret
// CHECKO-arm64-NEXT: fcmge.${neonSuffix} v0, v1, v0
// CHECKO-arm64-NEXT: ret
// CHECKOnone-arm64: fcmge.${neonSuffix}
// CHECKOnone-arm64: ret

func compare_ge${n}x${bits}(
  _ a: SIMD${n}<${scalar}>, _ b: SIMD${n}<${scalar}>
) -> SIMDMask<SIMD${n}<Int${bits}>> {
  a .>= b
}
// CHECK: compare_ge${n}x${bits}{{[[:alnum:]_]+}}:
// CHECK-x86_64: cmplep${'s' if bits == 32 else 'd'}
// CHECK-x86_64: ret
// CHECKO-arm64-NEXT: fcmge.${neonSuffix} v0, v0, v1
// CHECKO-arm64-NEXT: ret
// CHECKOnone-arm64: fcmge.${neonSuffix}
// CHECKOnone-arm64: ret

func compare_gt${n}x${bits}(
  _ a: SIMD${n}<${scalar}>, _ b: SIMD${n}<${scalar}>
) -> SIMDMask<SIMD${n}<Int${bits}>> {
  a .> b
}
// CHECK: compare_gt${n}x${bits}{{[[:alnum:]_]+}}:
// CHECK-x86_64: cmpltp${'s' if bits == 32 else 'd'}
// CHECK-x86_64: ret
// CHECKO-arm64-NEXT: fcmgt.${neonSuffix} v0, v0, v1
// CHECKO-arm64-NEXT: ret
// CHECKOnone-arm64: fcmgt.${neonSuffix}
// CHECKOnone-arm64: ret

%  end
% end
%end
