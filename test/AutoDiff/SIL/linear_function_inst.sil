// Round-trip parsing/printing test.

// RUN: %target-sil-opt -sil-print-types %s -emit-sorted-sil | %FileCheck %s --check-prefix=CHECK-SIL

// Round-trip serialization-deserialization test.

// RUN: %empty-directory(%t)
// RUN: %target-sil-opt -sil-print-types %s -emit-sib -o %t/tmp.sib -module-name main
// RUN: %target-sil-opt -sil-print-types %t/tmp.sib -o %t/tmp.sil -module-name main

// https://github.com/apple/swift/issues/54526
// Workaround because import declarations are not preserved in .sib files.
// RUN: sed -e 's/import Swift$/import Swift; import _Differentiation/' %t/tmp.sil > %t/tmp_fixed.sil
// RUN: %target-sil-opt -sil-print-types %t/tmp_fixed.sil -module-name main -emit-sorted-sil | %FileCheck %s --check-prefix=CHECK-SIL


sil_stage raw

import Swift
import Builtin

import _Differentiation

sil hidden @foo : $@convention(thin) (Float, Float, Float) -> Float {
bb0(%0 : $Float, %1 : $Float, %2 : $Float):
  return %2 : $Float
}

sil hidden @foo_t_wrt_0 : $@convention(thin) (Float, Float, Float) -> Float {
bb0(%0 : $Float, %1 : $Float, %2 : $Float):
  return %2 : $Float
}

sil hidden @foo_t_wrt_1_2 : $@convention(thin) (Float, Float) -> (Float, Float) {
bb0(%0 : $Float, %1 : $Float):
  %2 = tuple (%1 : $Float, %1 : $Float)
  return %2 : $(Float, Float)
}

sil @make_linear_func : $@convention(thin) () -> @differentiable(_linear) @convention(thin) (Float, @noDerivative Float, @noDerivative Float) -> Float {
bb0:
  %orig = function_ref @foo : $@convention(thin) (Float, Float, Float) -> Float
  %linear_orig = linear_function [parameters 0] %orig : $@convention(thin) (Float, Float, Float) -> Float
  %trans = function_ref @foo_t_wrt_0 : $@convention(thin) (Float, Float, Float) -> Float
  %linear_orig_with_trans = linear_function [parameters 0] %orig : $@convention(thin) (Float, Float, Float) -> Float with_transpose %trans : $@convention(thin) (Float, Float, Float) -> Float
  %extracted_orig = linear_function_extract [original] %linear_orig : $@differentiable(_linear) @convention(thin) (Float, @noDerivative Float, @noDerivative Float) -> Float
  %extracted_trans = linear_function_extract [transpose] %linear_orig : $@differentiable(_linear) @convention(thin) (Float, @noDerivative Float, @noDerivative Float) -> Float
  return %linear_orig_with_trans : $@differentiable(_linear) @convention(thin) (Float, @noDerivative Float, @noDerivative Float) -> Float
}


// CHECK-SIL-LABEL: sil @make_linear_func : $@convention(thin) () -> @differentiable(_linear) @convention(thin) (Float, @noDerivative Float, @noDerivative Float) -> Float {
// CHECK-SIL: bb0:
// CHECK-SIL:   [[ORIG:%.*]] = function_ref @foo : $@convention(thin) (Float, Float, Float) -> Float
// CHECK-SIL:   [[LIN_ORIG:%.*]] = linear_function [parameters 0] [[ORIG]] : $@convention(thin) (Float, Float, Float) -> Float
// CHECK-SIL:   [[TRANS:%.*]] = function_ref @foo_t_wrt_0 : $@convention(thin) (Float, Float, Float) -> Float
// CHECK-SIL:   [[LIN_ORIG_WITH_TRANS:%.*]] = linear_function [parameters 0] [[ORIG]] : $@convention(thin) (Float, Float, Float) -> Float with_transpose [[TRANS]] : $@convention(thin) (Float, Float, Float) -> Float
// CHECK-SIL:   [[EXTRACTED_ORIG:%.*]] = linear_function_extract [original] [[LIN_ORIG]] : $@differentiable(_linear) @convention(thin) (Float, @noDerivative Float, @noDerivative Float) -> Float
// CHECK-SIL:   [[EXTRACTED_TRANS:%.*]] = linear_function_extract [transpose] [[LIN_ORIG]] : $@differentiable(_linear) @convention(thin) (Float, @noDerivative Float, @noDerivative Float) -> Float
// CHECK-SIL:   return [[LIN_ORIG_WITH_TRANS]] : $@differentiable(_linear) @convention(thin) (Float, @noDerivative Float, @noDerivative Float) -> Float
// CHECK-SIL: }
