// Without directory
// RUN: %target-swift-frontend -O -cs-profile-generate -emit-ir %s | %FileCheck %s

// With directory
// RUN: %empty-directory(%t.dir)
// RUN: %target-swift-frontend -O -cs-profile-generate=%t.dir -emit-ir %s | %FileCheck %s

// Ensure Passes: PGOInstrumentationGenPass and InstrProfilingLoweringPass are invoked.
// RUN: %target-swift-frontend  -O -cs-profile-generate -emit-ir %s -Xllvm -debug-pass=Structure -Xllvm --time-passes -o /dev/null 2>&1 | %FileCheck -check-prefix=CHECK-PGOGENPASS-INVOKED-INSTR-GEN --check-prefix=CHECK-INSTRPROF %s
// CHECK-PGOGENPASS-INVOKED-INSTR-GEN: PGOInstrumentationGen
// CHECK-INSTRPROF: InstrProfilingLoweringPass

sil_stage canonical

import Builtin
import Swift
import SwiftShims

sil @b : $@convention(thin) () -> ()

sil @c : $@convention(thin) () -> ()


// CHECK: @__llvm_profile_runtime = external hidden global

// counter array (2 counters for the then/else)
// CHECK: @__profc_a = {{.*}} global {{.*}}
// data record pointing at the counter array and the function
// CHECK: @__profd_a = {{.*}} global {{.*}} ptr @a.local


// CHECK: br i1 {{.*}}, label %[[THEN:[0-9]+]], label %[[ELSE:[0-9]+]]
// THEN: increment counter[0] and call b()
// CHECK: [[THEN]]:
// CHECK:   {{.*}} = load {{.*}}@__profc_a{{.*}}
// CHECK:   store {{.*}} %{{.*}}, ptr @__profc_a
// CHECK:   call swiftcc void @b()
// CHECK:   br label %[[MERGE:[0-9]+]]

// ELSE: increment counter[1] and call c()
// CHECK: [[ELSE]]:
// CHECK:   {{.*}} = load {{.*}}, {{.*}} getelementptr{{.*}}@__profc_a{{.*}}
// CHECK:   store {{.*}} %{{.*}}, ptr @__profc_a
// CHECK:   call swiftcc void @c()
// CHECK:   br label %[[MERGE]]

// CHECK: [[MERGE]]:
// CHECK:   ret void

// CHECK: declare swiftcc void @c()
// CHECK: declare swiftcc void @b()

sil @a : $@convention(thin) (Bool) -> () {
bb0(%0 : $Bool):
  %2 = struct_extract %0, #Bool._value
  cond_br %2, bb1, bb2

bb1:
  // function_ref b()
  %4 = function_ref @b : $@convention(thin) () -> ()
  %5 = apply %4() : $@convention(thin) () -> ()
  br bb3 

bb2:
  // function_ref c()
  %7 = function_ref @c: $@convention(thin) () -> ()
  %8 = apply %7() : $@convention(thin) () -> ()
  br bb3 

bb3:
  %10 = tuple ()
  return %10
}
