// RUN: %sil-llvm-gen -target arm64-apple-macos12 -Xllvm -aarch64-use-tbi %s -output-kind=llvm-as -o - | %FileCheck -check-prefix=TBI %s
// RUN: %sil-llvm-gen -target arm64-apple-macos12 %s -output-kind=llvm-as -o - | %FileCheck -check-prefix=TAGGED_POINTER %s

import Builtin
import Swift
import _Concurrency

// REQUIRES: concurrency
// REQUIRES: CODEGENERATOR=AArch64
// REQUIRES: OS=macosx

// TAGGED_POINTER: define swiftcc { i64, i64 } @test_cast_implicitactor_to_opaqueisolation(i64 [[WORD1:%.*]], i64 [[WORD2:%.*]])
// TAGGED_POINTER: [[MASKED_WORD:%.*]] = and i64 [[WORD2]], -4
// TAGGED_POINTER: [[TUP1:%.*]] = insertvalue { i64, i64 } undef, i64 [[WORD1]], 0
// TAGGED_POINTER: [[TUP2:%.*]] = insertvalue { i64, i64 } [[TUP1]], i64 [[MASKED_WORD]], 1
// TAGGED_POINTER: ret { i64, i64 } [[TUP2]]
// TAGGED_POINTER-NEXT: }

// TBI: define swiftcc { i64, i64 } @test_cast_implicitactor_to_opaqueisolation(i64 [[WORD1:%.*]], i64 [[WORD2:%.*]])
// TBI: [[MASKED_WORD:%.*]] = and i64 [[WORD2]], -3458764513820540929 
// TBI: [[TUP1:%.*]] = insertvalue { i64, i64 } undef, i64 [[WORD1]], 0
// TBI: [[TUP2:%.*]] = insertvalue { i64, i64 } [[TUP1]], i64 [[MASKED_WORD]], 1
// TBI: ret { i64, i64 } [[TUP2]]
// TBI-NEXT: }
sil @test_cast_implicitactor_to_opaqueisolation : $@convention(thin) (@guaranteed Builtin.ImplicitActor) -> @owned Optional<any Actor> {
bb0(%0 : $Builtin.ImplicitActor):
  %2 = implicitactor_to_opaqueisolation_cast %0
  return %2
}
