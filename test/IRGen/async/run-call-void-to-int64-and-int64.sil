// RUN: %empty-directory(%t)
// RUN: %target-build-swift-dylib(%t/%target-library-name(PrintShims)) %S/../../Inputs/print-shims.swift -module-name PrintShims -emit-module -emit-module-path %t/PrintShims.swiftmodule
// RUN: %target-codesign %t/%target-library-name(PrintShims)
// RUN: %target-build-swift  -g -parse-sil %s -emit-ir -I %t -L %t -lPrintShim | %FileCheck %s --check-prefix=CHECK-LL
// RUN: %target-build-swift  -g -parse-sil %s -module-name main -o %t/main -I %t -L %t -lPrintShims %target-rpath(%t)
// RUN: %target-codesign %t/main
// RUN: %target-run %t/main %t/%target-library-name(PrintShims) | %FileCheck %s

// REQUIRES: executable_test
// REQUIRES: swift_test_mode_optimize_none
// REQUIRES: concurrency
// REQUIRES: concurrency_runtime
// UNSUPPORTED: back_deployment_runtime


import Builtin
import Swift
import PrintShims
import _Concurrency

sil public_external @printInt64 : $@convention(thin) (Int64) -> ()

// CHECK-LL: @voidToInt64AndInt64Tu =
// CHECK-LL: define{{( dllexport)?}}{{( protected)?}} swift{{(tail)?}}cc void @voidToInt64AndInt64(
sil @voidToInt64AndInt64 : $@async @convention(thin) () -> (Int64, Int64) {
  %int_literal1 = integer_literal $Builtin.Int64, 42
  %int1 = struct $Int64 (%int_literal1 : $Builtin.Int64)
  %int_literal2 = integer_literal $Builtin.Int64, 13
  %int2 = struct $Int64 (%int_literal2 : $Builtin.Int64)
  %tuple = tuple (%int1 : $Int64, %int2 : $Int64)
  return %tuple : $(Int64, Int64)
}

sil @test_case : $@convention(thin) @async () -> () {
  %voidToInt64AndInt64 = function_ref @voidToInt64AndInt64 : $@async @convention(thin) () -> (Int64, Int64)
  %tuple = apply %voidToInt64AndInt64() : $@async @convention(thin) () -> (Int64, Int64)
  %int1 = tuple_extract %tuple : $(Int64, Int64), 0
  %int2 = tuple_extract %tuple : $(Int64, Int64), 1

  %print = function_ref @printInt64 : $@convention(thin) (Int64) -> ()
  %result1 = apply %print(%int1) : $@convention(thin) (Int64) -> ()  // CHECK: 42
  %result2 = apply %print(%int2) : $@convention(thin) (Int64) -> ()  // CHECK: 13

  %void = tuple()
  return %void : $()
}

// Defined in _Concurrency
sil @$ss13_runAsyncMainyyyyYaKcF : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()

sil @no_throw_to_throw_think : $@convention(thin) @async (@guaranteed @async @callee_guaranteed () -> ()) -> @error Error {
bb0(%0 :$@async @callee_guaranteed () -> ()):
  %void = apply %0() : $@async @callee_guaranteed () -> ()
  return %void : $()
}

// main
sil @main : $@convention(c) () -> Int32 {
  %test_case_nothrow = function_ref @test_case : $@convention(thin) @async () -> ()
  %thick_test_case = thin_to_thick_function %test_case_nothrow : $@convention(thin) @async () -> () to $@callee_guaranteed @async () -> ()
  %thunk = function_ref @no_throw_to_throw_think : $@convention(thin) @async (@guaranteed @async @callee_guaranteed () -> ()) -> @error Error
  %throwing = partial_apply [callee_guaranteed] %thunk(%thick_test_case) : $@convention(thin) @async (@guaranteed @async @callee_guaranteed () -> ()) -> @error Error
  %runAsyncMain = function_ref @$ss13_runAsyncMainyyyyYaKcF : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()
  %result = apply %runAsyncMain(%throwing) : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()
  %out_literal = integer_literal $Builtin.Int32, 0
  %out = struct $Int32 (%out_literal : $Builtin.Int32)
  return %out : $Int32
}
