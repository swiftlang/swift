// RUN: %empty-directory(%t)
// RUN: %target-build-swift-dylib(%t/%target-library-name(PrintShims)) %S/../../Inputs/print-shims.swift -module-name PrintShims -emit-module -emit-module-path %t/PrintShims.swiftmodule
// RUN: %target-codesign %t/%target-library-name(PrintShims)
// RUN: %target-build-swift  -g -parse-sil %s -emit-ir -I %t -L %t -lPrintShim | %FileCheck %s --check-prefix=CHECK-LL
// RUN: %target-build-swift  -g -parse-sil %s -module-name main -o %t/main -I %t -L %t -lPrintShims %target-rpath(%t)
// RUN: %target-codesign %t/main
// RUN: %target-run %t/main %t/%target-library-name(PrintShims) | %FileCheck %s

// REQUIRES: executable_test
// REQUIRES: swift_test_mode_optimize_none
// REQUIRES: concurrency
// REQUIRES: concurrency_runtime
// UNSUPPORTED: back_deployment_runtime

import Builtin
import Swift
import PrintShims
import _Concurrency

sil public_external @printInt64 : $@convention(thin) (Int64) -> ()

// CHECK-LL: define{{( dllexport)?}}{{( protected)?}} swift{{(tail)?}}cc void @int64ToVoid(
sil @int64ToVoid : $@async @convention(thin) (Int64) -> () {
entry(%int : $Int64):
  %printInt64 = function_ref @printInt64 : $@convention(thin) (Int64) -> ()
  %result = apply %printInt64(%int) : $@convention(thin) (Int64) -> () // CHECK: 9999
  return %result : $()
}
sil @no_throw_to_throw_think_1 : $@convention(thin) @async (Int64, @guaranteed @async @callee_guaranteed (Int64) -> ()) -> @error Error {
bb0(%0: $Int64, %1 :$@async @callee_guaranteed (Int64) -> ()):
  %void = apply %1(%0) : $@async @callee_guaranteed (Int64) -> ()
  return %void : $()
}


sil @test_case : $@convention(thin) @async () -> () {
  %int64ToVoid = function_ref @int64ToVoid : $@async @convention(thin) (Int64) -> ()
  %int64ToVoidThick = thin_to_thick_function %int64ToVoid : $@convention(thin) @async (Int64) -> () to $@async @callee_guaranteed (Int64) -> ()
  %thunk = function_ref  @no_throw_to_throw_think_1 : $@convention(thin) @async (Int64, @guaranteed @async @callee_guaranteed (Int64) -> ()) -> @error Error
  %int64ThrowsToVoid = partial_apply [callee_guaranteed] %thunk(%int64ToVoidThick) : $@convention(thin) @async (Int64, @guaranteed @async @callee_guaranteed (Int64) -> ()) -> @error Error
  %int_literal = integer_literal $Builtin.Int64, 9999
  %int = struct $Int64 (%int_literal : $Builtin.Int64)
  try_apply %int64ThrowsToVoid(%int) : $@async @callee_guaranteed (Int64) -> @error Error, normal success, error failure

success(%value : $()):
  %result = tuple()
  return %result : $()

failure(%error : $Error):
  %end = builtin "errorInMain"(%error : $Error) : $()
  unreachable
}

// Defined in _Concurrency
sil @$ss13_runAsyncMainyyyyYaKcF : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()

sil @no_throw_to_throw_think : $@convention(thin) @async (@guaranteed @async @callee_guaranteed () -> ()) -> @error Error {
bb0(%0 :$@async @callee_guaranteed () -> ()):
  %void = apply %0() : $@async @callee_guaranteed () -> ()
  return %void : $()
}

// main
sil @main : $@convention(c) () -> Int32 {
  %test_case_nothrow = function_ref @test_case : $@convention(thin) @async () -> ()
  %thick_test_case = thin_to_thick_function %test_case_nothrow : $@convention(thin) @async () -> () to $@callee_guaranteed @async () -> ()
  %thunk = function_ref @no_throw_to_throw_think : $@convention(thin) @async (@guaranteed @async @callee_guaranteed () -> ()) -> @error Error
  %throwing = partial_apply [callee_guaranteed] %thunk(%thick_test_case) : $@convention(thin) @async (@guaranteed @async @callee_guaranteed () -> ()) -> @error Error
  %runAsyncMain = function_ref @$ss13_runAsyncMainyyyyYaKcF : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()
  %result = apply %runAsyncMain(%throwing) : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()
  %out_literal = integer_literal $Builtin.Int32, 0
  %out = struct $Int32 (%out_literal : $Builtin.Int32)
  return %out : $Int32
}
