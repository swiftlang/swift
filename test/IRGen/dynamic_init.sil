// RUN: %target-swift-frontend -enable-objc-interop  -emit-ir %s | %FileCheck %s --check-prefixes=CHECK,CHECK-objc
// RUN: %target-swift-frontend -disable-objc-interop -emit-ir %s | %FileCheck %s --check-prefixes=CHECK,CHECK-native


// REQUIRES: CPU=x86_64

sil_stage canonical

import Builtin
import Swift

class C {
  required init()
}

sil @$s12dynamic_init1CCACycACmcfC : $@convention(method) (@thick C.Type) -> @owned C
sil @$s12dynamic_init1CCACycACmcfc : $@convention(method) (@owned C) -> @owned C
sil @$s12dynamic_init1CCfd : $@convention(method) (@owned C) -> @owned Builtin.NativeObject
sil @$s12dynamic_init1CCfD : $@convention(method) (@owned C) -> ()

// CHECK-LABEL: define{{( dllexport)?}}{{( protected)?}} swiftcc void @"$s12dynamic_init15testDynamicInityAA1CCm2cm_tF"
sil @$s12dynamic_init15testDynamicInityAA1CCm2cm_tF : $@convention(method) (@thick C.Type) -> () {
bb0(%0 : $@thick C.Type):
  // CHECK-objc:   [[VTABLE_OFFSET:%[0-9]+]] = getelementptr inbounds ptr, ptr %0, i64 10
  // CHECK-native: [[VTABLE_OFFSET:%[0-9]+]] = getelementptr inbounds ptr, ptr %0, i64 7
  // CHECK:   [[CTOR:%[0-9]+]] = load ptr, ptr [[VTABLE_OFFSET]], align 8
  %2 = class_method %0 : $@thick C.Type, #C.init!allocator : (C.Type) -> () -> C, $@convention(method) (@thick C.Type) -> @owned C
  // CHECK:   [[RESULT:%[0-9]+]] = call swiftcc ptr [[CTOR]](ptr swiftself %0)
  %3 = apply %2(%0) : $@convention(method) (@thick C.Type) -> @owned C
  // CHECK:   call void @swift_release(ptr [[RESULT]])
  strong_release %3 : $C
  // CHECK: ret void
  %5 = tuple ()
  return %5 : $()
}

sil_vtable C {
  #C.init!allocator: @$s12dynamic_init1CCACycACmcfC // dynamic_init.C.__allocating_init (dynamic_init.C.Type)() -> dynamic_init.C
}
