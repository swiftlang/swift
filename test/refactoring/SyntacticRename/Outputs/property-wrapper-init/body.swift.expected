public struct Outer {
    @propertyWrapper
    public struct InnerWrapper<T> {
        public var wrappedValue: T
        public /*init:def*/init(initialValue: T) {
            self.wrappedValue = initialValue
        }
        public /*body:def*/<keywordBase>init</keywordBase>(<arglabel index=0>first</arglabel><param index=0></param>: Int, <arglabel index=1>body</arglabel><param index=1></param>: () -> T) {
            self.wrappedValue = body()
        }
    }
}

var globalInt: Int { return 17 }
public struct HasWrappers {
    @Outer.InnerWrapper
    public var x: Int = globalInt
    
    @Outer . /*body:call*/InnerWrapper(<callarg index=0>first</callarg><callcolon index=0>: </callcolon>20, <callarg index=1>body</callarg><callcolon index=1>: </callcolon>{ globalInt })
    public var y: Int
    
    @Outer . /*body:call*/InnerWrapper(<callarg index=0>first</callarg><callcolon index=0>: </callcolon>10, <callarg index=1>body</callarg><callcolon index=1>: </callcolon>{
        struct Inner {
            @Outer . /*init:call*/InnerWrapper(initialValue: globalInt)
            var x: Int
        }
        return Inner().x + globalInt
    })
    public var z: Int
}

func uses() {
    _ = Outer . /*body:call*/InnerWrapper(<callarg index=0>first</callarg><callcolon index=0>: </callcolon>42, <callarg index=1>body</callarg><callcolon index=1>: </callcolon>{ 45 })
    _ = Outer . /*init:call*/InnerWrapper(initialValue: 0)
}


