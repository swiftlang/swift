; ModuleID = '<swift-imported-modules>'
source_filename = "<swift-imported-modules>"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "arm64-apple-macosx13.0.0"

%struct.PlainStruct = type { i32 }
%struct.CxxClass = type { i32 }

@"\01l_entry_point" = private constant { i32, i32 } { i32 trunc (i64 sub (i64 ptrtoint (ptr @main to i64), i64 ptrtoint (ptr @"\01l_entry_point" to i64)) to i32), i32 0 }, section "__TEXT, __swift5_entry, regular, no_dead_strip", align 4
@__swift_reflection_version = linkonce_odr hidden constant i16 3
@llvm.used = appending global [10 x ptr] [ptr @main, ptr @"$s4main10takesInt321xys0C0V_tF", ptr @"$s4main9takesBool1xySb_tF", ptr @"$s4main9takesTrueyyF", ptr @"$s4main10takesFalseyyF", ptr @"$s4main16takesPlainStruct1xySo0cD0V_tF", ptr @"$s4main13takesCxxClass1xySo0cD0V_tF", ptr @"$s4main8takesFRT1xySo0C0V_tF", ptr @"\01l_entry_point", ptr @__swift_reflection_version], section "llvm.metadata"

define i32 @main(i32 %0, ptr %1) #0 {
entry:
  ret i32 0
}

; Function Attrs: uwtable
define hidden swiftcc void @"$s4main10takesInt321xys0C0V_tF"(i32 %0) #1 personality ptr @__gxx_personality_v0 {
entry:
  %x.debug = alloca i32, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %x.debug, i8 0, i64 4, i1 false)
  store i32 %0, ptr %x.debug, align 8
  invoke void @_Z10takesValueIiEvT_(i32 %0)
          to label %invoke.cont unwind label %exception.unwind

invoke.cont:                                      ; preds = %entry
  ret void

exception.unwind:                                 ; preds = %entry
  %1 = landingpad { ptr, i32 }
          catch ptr null
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: mustprogress noinline nounwind optnone ssp uwtable(sync)
define linkonce_odr void @_Z10takesValueIiEvT_(i32 noundef %value) #3 {
entry:
  %value.addr = alloca i32, align 4
  store i32 %value, ptr %value.addr, align 4
  ret void
}

; Function Attrs: cold noreturn nounwind memory(inaccessiblemem: write)
declare void @llvm.trap() #4

declare i32 @__gxx_personality_v0(...)

; Function Attrs: uwtable
define hidden swiftcc void @"$s4main9takesBool1xySb_tF"(i1 %0) #1 personality ptr @__gxx_personality_v0 {
entry:
  %x.debug = alloca i1, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %x.debug, i8 0, i64 1, i1 false)
  store i1 %0, ptr %x.debug, align 8
  invoke void @_Z10takesValueIbEvT_(i1 zeroext %0)
          to label %invoke.cont unwind label %exception.unwind

invoke.cont:                                      ; preds = %entry
  ret void

exception.unwind:                                 ; preds = %entry
  %1 = landingpad { ptr, i32 }
          catch ptr null
  call void @llvm.trap()
  unreachable
}

; Function Attrs: mustprogress noinline nounwind optnone ssp uwtable(sync)
define linkonce_odr void @_Z10takesValueIbEvT_(i1 noundef zeroext %value) #3 {
entry:
  %value.addr = alloca i8, align 1
  %storedv = zext i1 %value to i8
  store i8 %storedv, ptr %value.addr, align 1
  ret void
}

; Function Attrs: uwtable
define hidden swiftcc void @"$s4main9takesTrueyyF"() #1 personality ptr @__gxx_personality_v0 {
entry:
  invoke void @_Z10takesValueIbEvT_(i1 zeroext true)
          to label %invoke.cont unwind label %exception.unwind

invoke.cont:                                      ; preds = %entry
  ret void

exception.unwind:                                 ; preds = %entry
  %0 = landingpad { ptr, i32 }
          catch ptr null
  call void @llvm.trap()
  unreachable
}

; Function Attrs: uwtable
define hidden swiftcc void @"$s4main10takesFalseyyF"() #1 personality ptr @__gxx_personality_v0 {
entry:
  invoke void @_Z10takesValueIbEvT_(i1 zeroext false)
          to label %invoke.cont unwind label %exception.unwind

invoke.cont:                                      ; preds = %entry
  ret void

exception.unwind:                                 ; preds = %entry
  %0 = landingpad { ptr, i32 }
          catch ptr null
  call void @llvm.trap()
  unreachable
}

; Function Attrs: uwtable
define hidden swiftcc void @"$s4main16takesPlainStruct1xySo0cD0V_tF"(i32 %0) #1 personality ptr @__gxx_personality_v0 {
entry:
  %x.debug = alloca i32, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %x.debug, i8 0, i64 4, i1 false)
  %.coercion.coerced = alloca i64, align 8
  store i32 %0, ptr %x.debug, align 8
  call void @llvm.lifetime.start.p0(i64 64, ptr %.coercion.coerced)
  store i32 %0, ptr %.coercion.coerced, align 8
  %1 = load i64, ptr %.coercion.coerced, align 8
  call void @llvm.lifetime.end.p0(i64 64, ptr %.coercion.coerced)
  invoke void @_Z10takesValueI11PlainStructEvT_(i64 %1)
          to label %invoke.cont unwind label %exception.unwind

invoke.cont:                                      ; preds = %entry
  ret void

exception.unwind:                                 ; preds = %entry
  %2 = landingpad { ptr, i32 }
          catch ptr null
  call void @llvm.trap()
  unreachable
}

; Function Attrs: mustprogress noinline nounwind optnone ssp uwtable(sync)
define linkonce_odr void @_Z10takesValueI11PlainStructEvT_(i64 %value.coerce) #3 {
entry:
  %value = alloca %struct.PlainStruct, align 4
  %coerce.dive = getelementptr inbounds %struct.PlainStruct, ptr %value, i32 0, i32 0
  %coerce.val.ii = trunc i64 %value.coerce to i32
  store i32 %coerce.val.ii, ptr %coerce.dive, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: uwtable
define hidden swiftcc void @"$s4main13takesCxxClass1xySo0cD0V_tF"(i32 %0) #1 personality ptr @__gxx_personality_v0 {
entry:
  %x.debug = alloca i32, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %x.debug, i8 0, i64 4, i1 false)
  %.coercion.coerced = alloca i64, align 8
  store i32 %0, ptr %x.debug, align 8
  call void @llvm.lifetime.start.p0(i64 64, ptr %.coercion.coerced)
  store i32 %0, ptr %.coercion.coerced, align 8
  %1 = load i64, ptr %.coercion.coerced, align 8
  call void @llvm.lifetime.end.p0(i64 64, ptr %.coercion.coerced)
  invoke void @_Z10takesValueI8CxxClassEvT_(i64 %1)
          to label %invoke.cont unwind label %exception.unwind

invoke.cont:                                      ; preds = %entry
  ret void

exception.unwind:                                 ; preds = %entry
  %2 = landingpad { ptr, i32 }
          catch ptr null
  call void @llvm.trap()
  unreachable
}

; Function Attrs: mustprogress noinline nounwind optnone ssp uwtable(sync)
define linkonce_odr void @_Z10takesValueI8CxxClassEvT_(i64 %value.coerce) #3 {
entry:
  %value = alloca %struct.CxxClass, align 4
  %coerce.dive = getelementptr inbounds %struct.CxxClass, ptr %value, i32 0, i32 0
  %coerce.val.ii = trunc i64 %value.coerce to i32
  store i32 %coerce.val.ii, ptr %coerce.dive, align 4
  ret void
}

; Function Attrs: uwtable
define hidden swiftcc void @"$s4main8takesFRT1xySo0C0V_tF"(ptr %0) #1 personality ptr @__gxx_personality_v0 {
entry:
  %x.debug = alloca ptr, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %x.debug, i8 0, i64 8, i1 false)
  store ptr %0, ptr %x.debug, align 8
  invoke void @_Z10takesValueIP3FRTEvT_(ptr %0)
          to label %invoke.cont unwind label %exception.unwind

invoke.cont:                                      ; preds = %entry
  ret void

exception.unwind:                                 ; preds = %entry
  %1 = landingpad { ptr, i32 }
          catch ptr null
  call void @llvm.trap()
  unreachable
}

; Function Attrs: mustprogress noinline nounwind optnone ssp uwtable(sync)
define linkonce_odr void @_Z10takesValueIP3FRTEvT_(ptr noundef %value) #3 {
entry:
  %value.addr = alloca ptr, align 8
  store ptr %value, ptr %value.addr, align 8
  ret void
}

attributes #0 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+ccidx,+complxnum,+crc,+fp-armv8,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #1 = { uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+ccidx,+complxnum,+crc,+fp-armv8,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { mustprogress noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a12" "target-features"="+aes,+ccidx,+complxnum,+crc,+fp-armv8,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+ras,+rcpc,+rdm,+sha2,+v8.1a,+v8.2a,+v8.3a,+v8a,+zcm,+zcz" }
attributes #4 = { cold noreturn nounwind memory(inaccessiblemem: write) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10}
!swift.module.flags = !{!11}
!llvm.linker.options = !{!12, !13, !14, !15, !16, !17, !18, !19, !20}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 15, i32 4]}
!1 = !{i32 1, !"Objective-C Version", i32 2}
!2 = !{i32 1, !"Objective-C Image Info Version", i32 0}
!3 = !{i32 1, !"Objective-C Image Info Section", !"__DATA,__objc_imageinfo,regular,no_dead_strip"}
!4 = !{i32 4, !"Objective-C Garbage Collection", i32 100796160}
!5 = !{i32 1, !"Objective-C Class Properties", i32 64}
!6 = !{i32 1, !"wchar_size", i32 4}
!7 = !{i32 8, !"PIC Level", i32 2}
!8 = !{i32 7, !"uwtable", i32 1}
!9 = !{i32 7, !"frame-pointer", i32 1}
!10 = !{i32 1, !"Swift Version", i32 7}
!11 = !{!"standard-library", i1 false}
!12 = !{!"-lswiftCore"}
!13 = !{!"-lswiftSwiftOnoneSupport"}
!14 = !{!"-lswift_Concurrency"}
!15 = !{!"-lswift_StringProcessing"}
!16 = !{!"-lobjc"}
!17 = !{!"-lc++"}
!18 = !{!"-lswiftCxx"}
!19 = !{!"-lswiftCxxStdlib"}
!20 = !{!"-lswiftCompatibilityPacks"}
